=begin
#White Label Communications CPaas API Documentation

#A CPaaS platform API

The version of the OpenAPI document: 1.1
Contact: support@whitelabelcomm.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class DataApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get CDR Details
    # Retrieve the details of a single CDR record from an account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param cdr_id [String] CDR ID, string
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsCdrGetSingle]
    def v1_account_account_id_cdr_cdr_id_get(account_id, cdr_id, opts = {})
      data, _status_code, _headers = v1_account_account_id_cdr_cdr_id_get_with_http_info(account_id, cdr_id, opts)
      data
    end

    # Get CDR Details
    # Retrieve the details of a single CDR record from an account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param cdr_id [String] CDR ID, string
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsCdrGetSingle, Integer, Hash)>] ServiceDocsCdrGetSingle data, response status code and response headers
    def v1_account_account_id_cdr_cdr_id_get_with_http_info(account_id, cdr_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.v1_account_account_id_cdr_cdr_id_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling DataApi.v1_account_account_id_cdr_cdr_id_get"
      end
      # verify the required parameter 'cdr_id' is set
      if @api_client.config.client_side_validation && cdr_id.nil?
        fail ArgumentError, "Missing the required parameter 'cdr_id' when calling DataApi.v1_account_account_id_cdr_cdr_id_get"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/cdr/{cdrID}'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s)).sub('{' + 'cdrID' + '}', CGI.escape(cdr_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsCdrGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"DataApi.v1_account_account_id_cdr_cdr_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#v1_account_account_id_cdr_cdr_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDR List
    # Retrieve a list of CDRs in a specific account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_size Page size (Maximum number of results to display per page)
    # @option opts [String] :start_key Start key (Starting offset for displaying results)
    # @option opts [String] :created_from For displaying records which are created on or after this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds)
    # @option opts [String] :created_to For displaying records which are created on or before this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds)
    # @return [ServiceDocsCdrGetAll]
    def v1_account_account_id_cdr_get(account_id, opts = {})
      data, _status_code, _headers = v1_account_account_id_cdr_get_with_http_info(account_id, opts)
      data
    end

    # Get CDR List
    # Retrieve a list of CDRs in a specific account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_size Page size (Maximum number of results to display per page)
    # @option opts [String] :start_key Start key (Starting offset for displaying results)
    # @option opts [String] :created_from For displaying records which are created on or after this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds)
    # @option opts [String] :created_to For displaying records which are created on or before this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds)
    # @return [Array<(ServiceDocsCdrGetAll, Integer, Hash)>] ServiceDocsCdrGetAll data, response status code and response headers
    def v1_account_account_id_cdr_get_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.v1_account_account_id_cdr_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling DataApi.v1_account_account_id_cdr_get"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/cdr'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'start_key'] = opts[:'start_key'] if !opts[:'start_key'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsCdrGetAll'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"DataApi.v1_account_account_id_cdr_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#v1_account_account_id_cdr_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Call Daily Summary List
    # Retrieve a daily summary of calls, including the account ID that made or received a call, the call type, the month and year, the duration, and other relevant information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account_id 
    # @option opts [String] :call_type 
    # @option opts [String] :end_date 
    # @option opts [Integer] :page_size 
    # @option opts [String] :start_date 
    # @option opts [String] :start_key 
    # @return [ServiceDocsCallDailySummary]
    def v1_data_call_daily_summary_get(opts = {})
      data, _status_code, _headers = v1_data_call_daily_summary_get_with_http_info(opts)
      data
    end

    # Get Call Daily Summary List
    # Retrieve a daily summary of calls, including the account ID that made or received a call, the call type, the month and year, the duration, and other relevant information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account_id 
    # @option opts [String] :call_type 
    # @option opts [String] :end_date 
    # @option opts [Integer] :page_size 
    # @option opts [String] :start_date 
    # @option opts [String] :start_key 
    # @return [Array<(ServiceDocsCallDailySummary, Integer, Hash)>] ServiceDocsCallDailySummary data, response status code and response headers
    def v1_data_call_daily_summary_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.v1_data_call_daily_summary_get ...'
      end
      # resource path
      local_var_path = '/v1/data/call_daily_summary'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'account_id'] = opts[:'account_id'] if !opts[:'account_id'].nil?
      query_params[:'call_type'] = opts[:'call_type'] if !opts[:'call_type'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'start_key'] = opts[:'start_key'] if !opts[:'start_key'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsCallDailySummary'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"DataApi.v1_data_call_daily_summary_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#v1_data_call_daily_summary_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Call Detail List
    # Retrieve specific details about a call (e.g., caller, recipient, date, time, duration, etc.).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account 
    # @option opts [String] :call_type 
    # @option opts [String] :callee_name 
    # @option opts [String] :callee_number 
    # @option opts [String] :caller_name 
    # @option opts [String] :caller_number 
    # @option opts [String] :end_date 
    # @option opts [Integer] :page_size 
    # @option opts [String] :start_date 
    # @option opts [String] :start_key 
    # @return [ServiceDocsCallDetail]
    def v1_data_call_detail_get(opts = {})
      data, _status_code, _headers = v1_data_call_detail_get_with_http_info(opts)
      data
    end

    # Get Call Detail List
    # Retrieve specific details about a call (e.g., caller, recipient, date, time, duration, etc.).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account 
    # @option opts [String] :call_type 
    # @option opts [String] :callee_name 
    # @option opts [String] :callee_number 
    # @option opts [String] :caller_name 
    # @option opts [String] :caller_number 
    # @option opts [String] :end_date 
    # @option opts [Integer] :page_size 
    # @option opts [String] :start_date 
    # @option opts [String] :start_key 
    # @return [Array<(ServiceDocsCallDetail, Integer, Hash)>] ServiceDocsCallDetail data, response status code and response headers
    def v1_data_call_detail_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.v1_data_call_detail_get ...'
      end
      # resource path
      local_var_path = '/v1/data/call_detail'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'account'] = opts[:'account'] if !opts[:'account'].nil?
      query_params[:'call_type'] = opts[:'call_type'] if !opts[:'call_type'].nil?
      query_params[:'callee_name'] = opts[:'callee_name'] if !opts[:'callee_name'].nil?
      query_params[:'callee_number'] = opts[:'callee_number'] if !opts[:'callee_number'].nil?
      query_params[:'caller_name'] = opts[:'caller_name'] if !opts[:'caller_name'].nil?
      query_params[:'caller_number'] = opts[:'caller_number'] if !opts[:'caller_number'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'start_key'] = opts[:'start_key'] if !opts[:'start_key'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsCallDetail'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"DataApi.v1_data_call_detail_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#v1_data_call_detail_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Call Detail List
    # Retrieve a monthly summary of calls, including which accounts made or received calls, the call type, and other relevant information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account 
    # @option opts [String] :call_type 
    # @option opts [Integer] :end_month 
    # @option opts [Integer] :end_year 
    # @option opts [Integer] :page_size 
    # @option opts [String] :start_key 
    # @option opts [Integer] :start_month 
    # @option opts [Integer] :start_year 
    # @return [ServiceDocsCallMonthlySummary]
    def v1_data_call_monthly_summary_get(opts = {})
      data, _status_code, _headers = v1_data_call_monthly_summary_get_with_http_info(opts)
      data
    end

    # Get Call Detail List
    # Retrieve a monthly summary of calls, including which accounts made or received calls, the call type, and other relevant information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account 
    # @option opts [String] :call_type 
    # @option opts [Integer] :end_month 
    # @option opts [Integer] :end_year 
    # @option opts [Integer] :page_size 
    # @option opts [String] :start_key 
    # @option opts [Integer] :start_month 
    # @option opts [Integer] :start_year 
    # @return [Array<(ServiceDocsCallMonthlySummary, Integer, Hash)>] ServiceDocsCallMonthlySummary data, response status code and response headers
    def v1_data_call_monthly_summary_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.v1_data_call_monthly_summary_get ...'
      end
      # resource path
      local_var_path = '/v1/data/call_monthly_summary'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'account'] = opts[:'account'] if !opts[:'account'].nil?
      query_params[:'call_type'] = opts[:'call_type'] if !opts[:'call_type'].nil?
      query_params[:'end_month'] = opts[:'end_month'] if !opts[:'end_month'].nil?
      query_params[:'end_year'] = opts[:'end_year'] if !opts[:'end_year'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'start_key'] = opts[:'start_key'] if !opts[:'start_key'].nil?
      query_params[:'start_month'] = opts[:'start_month'] if !opts[:'start_month'].nil?
      query_params[:'start_year'] = opts[:'start_year'] if !opts[:'start_year'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsCallMonthlySummary'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"DataApi.v1_data_call_monthly_summary_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#v1_data_call_monthly_summary_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Endpoint List
    # Access the endpoint list for each CPaaS API.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :endpoint_name 
    # @option opts [String] :feature_name 
    # @option opts [Integer] :page_size 
    # @option opts [String] :start_key 
    # @option opts [String] :transaction_type 
    # @option opts [String] :version 
    # @return [ServiceDocsEndpointList]
    def v1_data_endpoint_list_get(opts = {})
      data, _status_code, _headers = v1_data_endpoint_list_get_with_http_info(opts)
      data
    end

    # Get Endpoint List
    # Access the endpoint list for each CPaaS API.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :endpoint_name 
    # @option opts [String] :feature_name 
    # @option opts [Integer] :page_size 
    # @option opts [String] :start_key 
    # @option opts [String] :transaction_type 
    # @option opts [String] :version 
    # @return [Array<(ServiceDocsEndpointList, Integer, Hash)>] ServiceDocsEndpointList data, response status code and response headers
    def v1_data_endpoint_list_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.v1_data_endpoint_list_get ...'
      end
      # resource path
      local_var_path = '/v1/data/endpoint_list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'endpoint_name'] = opts[:'endpoint_name'] if !opts[:'endpoint_name'].nil?
      query_params[:'feature_name'] = opts[:'feature_name'] if !opts[:'feature_name'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'start_key'] = opts[:'start_key'] if !opts[:'start_key'].nil?
      query_params[:'transaction_type'] = opts[:'transaction_type'] if !opts[:'transaction_type'].nil?
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsEndpointList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"DataApi.v1_data_endpoint_list_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#v1_data_endpoint_list_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Event Daily Summary List
    # Obtain a daily summary of events in a CPaaS account (e.g., setting/resetting the presence status for a user or extension).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account_id 
    # @option opts [String] :component 
    # @option opts [String] :end_date 
    # @option opts [Integer] :page_size 
    # @option opts [String] :start_date 
    # @option opts [String] :start_key 
    # @return [ServiceDocsEventDailySummary]
    def v1_data_event_daily_summary_get(opts = {})
      data, _status_code, _headers = v1_data_event_daily_summary_get_with_http_info(opts)
      data
    end

    # Get Event Daily Summary List
    # Obtain a daily summary of events in a CPaaS account (e.g., setting/resetting the presence status for a user or extension).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account_id 
    # @option opts [String] :component 
    # @option opts [String] :end_date 
    # @option opts [Integer] :page_size 
    # @option opts [String] :start_date 
    # @option opts [String] :start_key 
    # @return [Array<(ServiceDocsEventDailySummary, Integer, Hash)>] ServiceDocsEventDailySummary data, response status code and response headers
    def v1_data_event_daily_summary_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.v1_data_event_daily_summary_get ...'
      end
      # resource path
      local_var_path = '/v1/data/event_daily_summary'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'account_id'] = opts[:'account_id'] if !opts[:'account_id'].nil?
      query_params[:'component'] = opts[:'component'] if !opts[:'component'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'start_key'] = opts[:'start_key'] if !opts[:'start_key'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsEventDailySummary'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"DataApi.v1_data_event_daily_summary_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#v1_data_event_daily_summary_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Event Details
    # Obtain specific details about an event (e.g., an E911 notification, a deleted account, or a created user).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account_id 
    # @option opts [String] :component 
    # @option opts [String] :end_date_time 
    # @option opts [String] :event_name 
    # @option opts [String] :exec_status 
    # @option opts [Integer] :page_size 
    # @option opts [String] :start_date_time 
    # @option opts [String] :start_key 
    # @option opts [String] :username 
    # @return [ServiceDocsEventDetail]
    def v1_data_event_detail_get(opts = {})
      data, _status_code, _headers = v1_data_event_detail_get_with_http_info(opts)
      data
    end

    # Get Event Details
    # Obtain specific details about an event (e.g., an E911 notification, a deleted account, or a created user).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account_id 
    # @option opts [String] :component 
    # @option opts [String] :end_date_time 
    # @option opts [String] :event_name 
    # @option opts [String] :exec_status 
    # @option opts [Integer] :page_size 
    # @option opts [String] :start_date_time 
    # @option opts [String] :start_key 
    # @option opts [String] :username 
    # @return [Array<(ServiceDocsEventDetail, Integer, Hash)>] ServiceDocsEventDetail data, response status code and response headers
    def v1_data_event_detail_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.v1_data_event_detail_get ...'
      end
      # resource path
      local_var_path = '/v1/data/event_detail'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'account_id'] = opts[:'account_id'] if !opts[:'account_id'].nil?
      query_params[:'component'] = opts[:'component'] if !opts[:'component'].nil?
      query_params[:'end_date_time'] = opts[:'end_date_time'] if !opts[:'end_date_time'].nil?
      query_params[:'event_name'] = opts[:'event_name'] if !opts[:'event_name'].nil?
      query_params[:'exec_status'] = opts[:'exec_status'] if !opts[:'exec_status'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'start_date_time'] = opts[:'start_date_time'] if !opts[:'start_date_time'].nil?
      query_params[:'start_key'] = opts[:'start_key'] if !opts[:'start_key'].nil?
      query_params[:'username'] = opts[:'username'] if !opts[:'username'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsEventDetail'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"DataApi.v1_data_event_detail_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#v1_data_event_detail_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Event Monthly Summary List
    # Obtain a monthly summary of events in a CPaaS account (e.g., adding media files or assigning phone numbers).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account_id 
    # @option opts [String] :component 
    # @option opts [Integer] :end_month 
    # @option opts [Integer] :end_year 
    # @option opts [Integer] :page_size 
    # @option opts [String] :start_key 
    # @option opts [Integer] :start_month 
    # @option opts [Integer] :start_year 
    # @return [ServiceDocsEventMonthlySummary]
    def v1_data_event_monthly_summary_get(opts = {})
      data, _status_code, _headers = v1_data_event_monthly_summary_get_with_http_info(opts)
      data
    end

    # Get Event Monthly Summary List
    # Obtain a monthly summary of events in a CPaaS account (e.g., adding media files or assigning phone numbers).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account_id 
    # @option opts [String] :component 
    # @option opts [Integer] :end_month 
    # @option opts [Integer] :end_year 
    # @option opts [Integer] :page_size 
    # @option opts [String] :start_key 
    # @option opts [Integer] :start_month 
    # @option opts [Integer] :start_year 
    # @return [Array<(ServiceDocsEventMonthlySummary, Integer, Hash)>] ServiceDocsEventMonthlySummary data, response status code and response headers
    def v1_data_event_monthly_summary_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.v1_data_event_monthly_summary_get ...'
      end
      # resource path
      local_var_path = '/v1/data/event_monthly_summary'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'account_id'] = opts[:'account_id'] if !opts[:'account_id'].nil?
      query_params[:'component'] = opts[:'component'] if !opts[:'component'].nil?
      query_params[:'end_month'] = opts[:'end_month'] if !opts[:'end_month'].nil?
      query_params[:'end_year'] = opts[:'end_year'] if !opts[:'end_year'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'start_key'] = opts[:'start_key'] if !opts[:'start_key'].nil?
      query_params[:'start_month'] = opts[:'start_month'] if !opts[:'start_month'].nil?
      query_params[:'start_year'] = opts[:'start_year'] if !opts[:'start_year'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsEventMonthlySummary'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"DataApi.v1_data_event_monthly_summary_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#v1_data_event_monthly_summary_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Feature Daily Summary List
    # Retrieve a daily summary about a feature, including usage, which accounts execute the steps, and other relevant information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :end_date 
    # @option opts [String] :feature_name 
    # @option opts [Integer] :page_size 
    # @option opts [String] :start_date 
    # @option opts [String] :start_key 
    # @return [ServiceDocsFeatureDailySummary]
    def v1_data_feature_daily_summary_get(opts = {})
      data, _status_code, _headers = v1_data_feature_daily_summary_get_with_http_info(opts)
      data
    end

    # Get Feature Daily Summary List
    # Retrieve a daily summary about a feature, including usage, which accounts execute the steps, and other relevant information.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :end_date 
    # @option opts [String] :feature_name 
    # @option opts [Integer] :page_size 
    # @option opts [String] :start_date 
    # @option opts [String] :start_key 
    # @return [Array<(ServiceDocsFeatureDailySummary, Integer, Hash)>] ServiceDocsFeatureDailySummary data, response status code and response headers
    def v1_data_feature_daily_summary_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.v1_data_feature_daily_summary_get ...'
      end
      # resource path
      local_var_path = '/v1/data/feature_daily_summary'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'feature_name'] = opts[:'feature_name'] if !opts[:'feature_name'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'start_key'] = opts[:'start_key'] if !opts[:'start_key'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsFeatureDailySummary'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"DataApi.v1_data_feature_daily_summary_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#v1_data_feature_daily_summary_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Feature Monthly Summary List
    # Retrieve a monthly summary about a feature’s usage, new users, updates, and other relevant information.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :end_month 
    # @option opts [Integer] :end_year 
    # @option opts [String] :feature_name 
    # @option opts [Integer] :page_size 
    # @option opts [String] :start_key 
    # @option opts [Integer] :start_month 
    # @option opts [Integer] :start_year 
    # @return [ServiceDocsFeatureMonthlySummary]
    def v1_data_feature_monthly_summary_get(opts = {})
      data, _status_code, _headers = v1_data_feature_monthly_summary_get_with_http_info(opts)
      data
    end

    # Get Feature Monthly Summary List
    # Retrieve a monthly summary about a feature’s usage, new users, updates, and other relevant information.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :end_month 
    # @option opts [Integer] :end_year 
    # @option opts [String] :feature_name 
    # @option opts [Integer] :page_size 
    # @option opts [String] :start_key 
    # @option opts [Integer] :start_month 
    # @option opts [Integer] :start_year 
    # @return [Array<(ServiceDocsFeatureMonthlySummary, Integer, Hash)>] ServiceDocsFeatureMonthlySummary data, response status code and response headers
    def v1_data_feature_monthly_summary_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.v1_data_feature_monthly_summary_get ...'
      end
      # resource path
      local_var_path = '/v1/data/feature_monthly_summary'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'end_month'] = opts[:'end_month'] if !opts[:'end_month'].nil?
      query_params[:'end_year'] = opts[:'end_year'] if !opts[:'end_year'].nil?
      query_params[:'feature_name'] = opts[:'feature_name'] if !opts[:'feature_name'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'start_key'] = opts[:'start_key'] if !opts[:'start_key'].nil?
      query_params[:'start_month'] = opts[:'start_month'] if !opts[:'start_month'].nil?
      query_params[:'start_year'] = opts[:'start_year'] if !opts[:'start_year'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsFeatureMonthlySummary'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"DataApi.v1_data_feature_monthly_summary_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#v1_data_feature_monthly_summary_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
