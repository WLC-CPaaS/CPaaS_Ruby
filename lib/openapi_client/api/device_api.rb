=begin
#White Label Communications CPaas API Documentation

#A CPaaS platform API

The version of the OpenAPI document: 1.1
Contact: support@whitelabelcomm.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class DeviceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete Device
    # Remove one device from a CPaaS account.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param deviceid [String] Device ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsDeviceGetSingle]
    def v1_account_accountid_device_deviceid_delete(accountid, deviceid, opts = {})
      data, _status_code, _headers = v1_account_accountid_device_deviceid_delete_with_http_info(accountid, deviceid, opts)
      data
    end

    # Delete Device
    # Remove one device from a CPaaS account.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param deviceid [String] Device ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsDeviceGetSingle, Integer, Hash)>] ServiceDocsDeviceGetSingle data, response status code and response headers
    def v1_account_accountid_device_deviceid_delete_with_http_info(accountid, deviceid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceApi.v1_account_accountid_device_deviceid_delete ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling DeviceApi.v1_account_accountid_device_deviceid_delete"
      end
      # verify the required parameter 'deviceid' is set
      if @api_client.config.client_side_validation && deviceid.nil?
        fail ArgumentError, "Missing the required parameter 'deviceid' when calling DeviceApi.v1_account_accountid_device_deviceid_delete"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}/device/{deviceid}'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s)).sub('{' + 'deviceid' + '}', CGI.escape(deviceid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsDeviceGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceApi.v1_account_accountid_device_deviceid_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceApi#v1_account_accountid_device_deviceid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Device Details
    # Permit a user to view specific device details.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param deviceid [String] Device ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsDeviceGetSingle]
    def v1_account_accountid_device_deviceid_get(accountid, deviceid, opts = {})
      data, _status_code, _headers = v1_account_accountid_device_deviceid_get_with_http_info(accountid, deviceid, opts)
      data
    end

    # Get Device Details
    # Permit a user to view specific device details.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param deviceid [String] Device ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsDeviceGetSingle, Integer, Hash)>] ServiceDocsDeviceGetSingle data, response status code and response headers
    def v1_account_accountid_device_deviceid_get_with_http_info(accountid, deviceid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceApi.v1_account_accountid_device_deviceid_get ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling DeviceApi.v1_account_accountid_device_deviceid_get"
      end
      # verify the required parameter 'deviceid' is set
      if @api_client.config.client_side_validation && deviceid.nil?
        fail ArgumentError, "Missing the required parameter 'deviceid' when calling DeviceApi.v1_account_accountid_device_deviceid_get"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}/device/{deviceid}'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s)).sub('{' + 'deviceid' + '}', CGI.escape(deviceid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsDeviceGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceApi.v1_account_accountid_device_deviceid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceApi#v1_account_accountid_device_deviceid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Device
    # Edit specifics about the device, such as the device type, name, and owner.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param deviceid [String] Device ID, 32 alpha numeric
    # @param device [ServiceVOIPDeviceAddEdit2] device fields
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsDeviceGetSingle]
    def v1_account_accountid_device_deviceid_put(accountid, deviceid, device, opts = {})
      data, _status_code, _headers = v1_account_accountid_device_deviceid_put_with_http_info(accountid, deviceid, device, opts)
      data
    end

    # Update Device
    # Edit specifics about the device, such as the device type, name, and owner.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param deviceid [String] Device ID, 32 alpha numeric
    # @param device [ServiceVOIPDeviceAddEdit2] device fields
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsDeviceGetSingle, Integer, Hash)>] ServiceDocsDeviceGetSingle data, response status code and response headers
    def v1_account_accountid_device_deviceid_put_with_http_info(accountid, deviceid, device, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceApi.v1_account_accountid_device_deviceid_put ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling DeviceApi.v1_account_accountid_device_deviceid_put"
      end
      # verify the required parameter 'deviceid' is set
      if @api_client.config.client_side_validation && deviceid.nil?
        fail ArgumentError, "Missing the required parameter 'deviceid' when calling DeviceApi.v1_account_accountid_device_deviceid_put"
      end
      # verify the required parameter 'device' is set
      if @api_client.config.client_side_validation && device.nil?
        fail ArgumentError, "Missing the required parameter 'device' when calling DeviceApi.v1_account_accountid_device_deviceid_put"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}/device/{deviceid}'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s)).sub('{' + 'deviceid' + '}', CGI.escape(deviceid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(device)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsDeviceGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceApi.v1_account_accountid_device_deviceid_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceApi#v1_account_accountid_device_deviceid_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reboot Device
    # Reboot a device in an account to mitigate malware and improve device performance.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param deviceid [String] Device ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsDeviceReboot]
    def v1_account_accountid_device_deviceid_reboot_post(accountid, deviceid, opts = {})
      data, _status_code, _headers = v1_account_accountid_device_deviceid_reboot_post_with_http_info(accountid, deviceid, opts)
      data
    end

    # Reboot Device
    # Reboot a device in an account to mitigate malware and improve device performance.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param deviceid [String] Device ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsDeviceReboot, Integer, Hash)>] ServiceDocsDeviceReboot data, response status code and response headers
    def v1_account_accountid_device_deviceid_reboot_post_with_http_info(accountid, deviceid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceApi.v1_account_accountid_device_deviceid_reboot_post ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling DeviceApi.v1_account_accountid_device_deviceid_reboot_post"
      end
      # verify the required parameter 'deviceid' is set
      if @api_client.config.client_side_validation && deviceid.nil?
        fail ArgumentError, "Missing the required parameter 'deviceid' when calling DeviceApi.v1_account_accountid_device_deviceid_reboot_post"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}/device/{deviceid}/reboot'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s)).sub('{' + 'deviceid' + '}', CGI.escape(deviceid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsDeviceReboot'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceApi.v1_account_accountid_device_deviceid_reboot_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceApi#v1_account_accountid_device_deviceid_reboot_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Device List
    # Obtain a list of all devices associated with an account such as fax machines, cell phones, and soft phones.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_key start_key for pagination that was returned as next_start_key from your previous call
    # @option opts [Integer] :page_size number of records to return, range 1 to 50
    # @return [ServiceDocsDeviceGetAll]
    def v1_account_accountid_device_get(accountid, opts = {})
      data, _status_code, _headers = v1_account_accountid_device_get_with_http_info(accountid, opts)
      data
    end

    # Get Device List
    # Obtain a list of all devices associated with an account such as fax machines, cell phones, and soft phones.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_key start_key for pagination that was returned as next_start_key from your previous call
    # @option opts [Integer] :page_size number of records to return, range 1 to 50
    # @return [Array<(ServiceDocsDeviceGetAll, Integer, Hash)>] ServiceDocsDeviceGetAll data, response status code and response headers
    def v1_account_accountid_device_get_with_http_info(accountid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceApi.v1_account_accountid_device_get ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling DeviceApi.v1_account_accountid_device_get"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}/device'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_key'] = opts[:'start_key'] if !opts[:'start_key'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsDeviceGetAll'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceApi.v1_account_accountid_device_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceApi#v1_account_accountid_device_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Device
    # Connect a new device to an account to enhance communication methods.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param device [ServiceVOIPDeviceAddEdit2] device fields
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsDeviceGetSingle]
    def v1_account_accountid_device_post(accountid, device, opts = {})
      data, _status_code, _headers = v1_account_accountid_device_post_with_http_info(accountid, device, opts)
      data
    end

    # Create Device
    # Connect a new device to an account to enhance communication methods.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param device [ServiceVOIPDeviceAddEdit2] device fields
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsDeviceGetSingle, Integer, Hash)>] ServiceDocsDeviceGetSingle data, response status code and response headers
    def v1_account_accountid_device_post_with_http_info(accountid, device, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceApi.v1_account_accountid_device_post ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling DeviceApi.v1_account_accountid_device_post"
      end
      # verify the required parameter 'device' is set
      if @api_client.config.client_side_validation && device.nil?
        fail ArgumentError, "Missing the required parameter 'device' when calling DeviceApi.v1_account_accountid_device_post"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}/device'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(device)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsDeviceGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceApi.v1_account_accountid_device_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceApi#v1_account_accountid_device_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Device Status
    # Retrieve a device’s status (e.g., registered or not registered) in an account.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsDeviceStatus]
    def v1_account_accountid_device_status_get(accountid, opts = {})
      data, _status_code, _headers = v1_account_accountid_device_status_get_with_http_info(accountid, opts)
      data
    end

    # Get Device Status
    # Retrieve a device’s status (e.g., registered or not registered) in an account.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsDeviceStatus, Integer, Hash)>] ServiceDocsDeviceStatus data, response status code and response headers
    def v1_account_accountid_device_status_get_with_http_info(accountid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceApi.v1_account_accountid_device_status_get ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling DeviceApi.v1_account_accountid_device_status_get"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}/device/status'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsDeviceStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceApi.v1_account_accountid_device_status_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceApi#v1_account_accountid_device_status_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
