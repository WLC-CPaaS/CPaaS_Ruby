=begin
#White Label Communications CPaas API Documentation

#A CPaaS platform API

The version of the OpenAPI document: 1.1
Contact: support@whitelabelcomm.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class MediaApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Media File
    # Gather data about the media objects in an account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param media_id [String] Media ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [File]
    def v1_account_account_id_media_media_id_file_get(account_id, media_id, opts = {})
      data, _status_code, _headers = v1_account_account_id_media_media_id_file_get_with_http_info(account_id, media_id, opts)
      data
    end

    # Get Media File
    # Gather data about the media objects in an account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param media_id [String] Media ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def v1_account_account_id_media_media_id_file_get_with_http_info(account_id, media_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MediaApi.v1_account_account_id_media_media_id_file_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling MediaApi.v1_account_account_id_media_media_id_file_get"
      end
      # verify the required parameter 'media_id' is set
      if @api_client.config.client_side_validation && media_id.nil?
        fail ArgumentError, "Missing the required parameter 'media_id' when calling MediaApi.v1_account_account_id_media_media_id_file_get"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/media/{mediaID}/file'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s)).sub('{' + 'mediaID' + '}', CGI.escape(media_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'audio/mp3', 'audio/mpeg', 'audio/mpeg3', 'audio/x-wav', 'audio/wav', 'audio/ogg', 'video/x-flv', 'video/h264', 'video/mpeg', 'video/quicktime', 'video/mp4', 'video/webm']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"MediaApi.v1_account_account_id_media_media_id_file_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MediaApi#v1_account_account_id_media_media_id_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Media File
    # Include a media file that is connected to a media object in an account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param media_id [String] Media ID, 32 alpha numeric
    # @param file [File] Media file
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsMediaGetSingle]
    def v1_account_account_id_media_media_id_file_post(account_id, media_id, file, opts = {})
      data, _status_code, _headers = v1_account_account_id_media_media_id_file_post_with_http_info(account_id, media_id, file, opts)
      data
    end

    # Add Media File
    # Include a media file that is connected to a media object in an account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param media_id [String] Media ID, 32 alpha numeric
    # @param file [File] Media file
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsMediaGetSingle, Integer, Hash)>] ServiceDocsMediaGetSingle data, response status code and response headers
    def v1_account_account_id_media_media_id_file_post_with_http_info(account_id, media_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MediaApi.v1_account_account_id_media_media_id_file_post ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling MediaApi.v1_account_account_id_media_media_id_file_post"
      end
      # verify the required parameter 'media_id' is set
      if @api_client.config.client_side_validation && media_id.nil?
        fail ArgumentError, "Missing the required parameter 'media_id' when calling MediaApi.v1_account_account_id_media_media_id_file_post"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling MediaApi.v1_account_account_id_media_media_id_file_post"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/media/{mediaID}/file'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s)).sub('{' + 'mediaID' + '}', CGI.escape(media_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsMediaGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"MediaApi.v1_account_account_id_media_media_id_file_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MediaApi#v1_account_account_id_media_media_id_file_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Media List
    # View all media files for an account in your organization.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_key start_key for pagination that was returned as next_start_key from your previous call
    # @option opts [Integer] :page_size number of records to return, range 1 to 50
    # @return [ServiceDocsMediaGetAll]
    def v1_account_accountid_media_get(accountid, opts = {})
      data, _status_code, _headers = v1_account_accountid_media_get_with_http_info(accountid, opts)
      data
    end

    # Get Media List
    # View all media files for an account in your organization.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_key start_key for pagination that was returned as next_start_key from your previous call
    # @option opts [Integer] :page_size number of records to return, range 1 to 50
    # @return [Array<(ServiceDocsMediaGetAll, Integer, Hash)>] ServiceDocsMediaGetAll data, response status code and response headers
    def v1_account_accountid_media_get_with_http_info(accountid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MediaApi.v1_account_accountid_media_get ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling MediaApi.v1_account_accountid_media_get"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}/media'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_key'] = opts[:'start_key'] if !opts[:'start_key'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsMediaGetAll'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"MediaApi.v1_account_accountid_media_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MediaApi#v1_account_accountid_media_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Media
    # Remove a media file that is no longer in use from an account.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param mediaid [String] Device ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsMediaGetSingle]
    def v1_account_accountid_media_mediaid_delete(accountid, mediaid, opts = {})
      data, _status_code, _headers = v1_account_accountid_media_mediaid_delete_with_http_info(accountid, mediaid, opts)
      data
    end

    # Delete Media
    # Remove a media file that is no longer in use from an account.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param mediaid [String] Device ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsMediaGetSingle, Integer, Hash)>] ServiceDocsMediaGetSingle data, response status code and response headers
    def v1_account_accountid_media_mediaid_delete_with_http_info(accountid, mediaid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MediaApi.v1_account_accountid_media_mediaid_delete ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling MediaApi.v1_account_accountid_media_mediaid_delete"
      end
      # verify the required parameter 'mediaid' is set
      if @api_client.config.client_side_validation && mediaid.nil?
        fail ArgumentError, "Missing the required parameter 'mediaid' when calling MediaApi.v1_account_accountid_media_mediaid_delete"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}/media/{mediaid}'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s)).sub('{' + 'mediaid' + '}', CGI.escape(mediaid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsMediaGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"MediaApi.v1_account_accountid_media_mediaid_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MediaApi#v1_account_accountid_media_mediaid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Media Details
    # Permit users to view an account's specific media information.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param mediaid [String] Media ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsMediaGetSingle]
    def v1_account_accountid_media_mediaid_get(accountid, mediaid, opts = {})
      data, _status_code, _headers = v1_account_accountid_media_mediaid_get_with_http_info(accountid, mediaid, opts)
      data
    end

    # Get Media Details
    # Permit users to view an account&#39;s specific media information.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param mediaid [String] Media ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsMediaGetSingle, Integer, Hash)>] ServiceDocsMediaGetSingle data, response status code and response headers
    def v1_account_accountid_media_mediaid_get_with_http_info(accountid, mediaid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MediaApi.v1_account_accountid_media_mediaid_get ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling MediaApi.v1_account_accountid_media_mediaid_get"
      end
      # verify the required parameter 'mediaid' is set
      if @api_client.config.client_side_validation && mediaid.nil?
        fail ArgumentError, "Missing the required parameter 'mediaid' when calling MediaApi.v1_account_accountid_media_mediaid_get"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}/media/{mediaid}'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s)).sub('{' + 'mediaid' + '}', CGI.escape(mediaid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsMediaGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"MediaApi.v1_account_accountid_media_mediaid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MediaApi#v1_account_accountid_media_mediaid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Media
    # Generate a media object to allow users to upload a media file in an account.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param media [ServiceVOIPMediaAddEditData] Media creation or update payload
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsMediaGetSingle]
    def v1_account_accountid_media_post(accountid, media, opts = {})
      data, _status_code, _headers = v1_account_accountid_media_post_with_http_info(accountid, media, opts)
      data
    end

    # Create Media
    # Generate a media object to allow users to upload a media file in an account.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param media [ServiceVOIPMediaAddEditData] Media creation or update payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsMediaGetSingle, Integer, Hash)>] ServiceDocsMediaGetSingle data, response status code and response headers
    def v1_account_accountid_media_post_with_http_info(accountid, media, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MediaApi.v1_account_accountid_media_post ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling MediaApi.v1_account_accountid_media_post"
      end
      # verify the required parameter 'media' is set
      if @api_client.config.client_side_validation && media.nil?
        fail ArgumentError, "Missing the required parameter 'media' when calling MediaApi.v1_account_accountid_media_post"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}/media'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(media)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsMediaGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"MediaApi.v1_account_accountid_media_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MediaApi#v1_account_accountid_media_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
