=begin
#White Label Communications CPaas API Documentation

#A CPaaS platform API

The version of the OpenAPI document: 1.1
Contact: support@whitelabelcomm.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class CallRecordingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Account Call Recording
    # Obtain a list of the call recordings within an account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsCallRecordingGetAll]
    def v1_account_account_id_recording_get(account_id, opts = {})
      data, _status_code, _headers = v1_account_account_id_recording_get_with_http_info(account_id, opts)
      data
    end

    # Get Account Call Recording
    # Obtain a list of the call recordings within an account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsCallRecordingGetAll, Integer, Hash)>] ServiceDocsCallRecordingGetAll data, response status code and response headers
    def v1_account_account_id_recording_get_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallRecordingApi.v1_account_account_id_recording_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling CallRecordingApi.v1_account_account_id_recording_get"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/recording'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsCallRecordingGetAll'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"CallRecordingApi.v1_account_account_id_recording_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallRecordingApi#v1_account_account_id_recording_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Call Recording
    # Delete a single call recording from an account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param recording_id [String] Recording ID, 39 (yyyymm-&lt;32 id&gt;)
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsCallRecordingGetSingle]
    def v1_account_account_id_recording_recording_id_delete(account_id, recording_id, opts = {})
      data, _status_code, _headers = v1_account_account_id_recording_recording_id_delete_with_http_info(account_id, recording_id, opts)
      data
    end

    # Delete Call Recording
    # Delete a single call recording from an account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param recording_id [String] Recording ID, 39 (yyyymm-&lt;32 id&gt;)
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsCallRecordingGetSingle, Integer, Hash)>] ServiceDocsCallRecordingGetSingle data, response status code and response headers
    def v1_account_account_id_recording_recording_id_delete_with_http_info(account_id, recording_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallRecordingApi.v1_account_account_id_recording_recording_id_delete ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling CallRecordingApi.v1_account_account_id_recording_recording_id_delete"
      end
      # verify the required parameter 'recording_id' is set
      if @api_client.config.client_side_validation && recording_id.nil?
        fail ArgumentError, "Missing the required parameter 'recording_id' when calling CallRecordingApi.v1_account_account_id_recording_recording_id_delete"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/recording/{recordingID}'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s)).sub('{' + 'recordingID' + '}', CGI.escape(recording_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsCallRecordingGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"CallRecordingApi.v1_account_account_id_recording_recording_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallRecordingApi#v1_account_account_id_recording_recording_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Call Recording Details
    # Access details for each recorded call in an account (e.g., duration, names and numbers of call participants, etc.).
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param recording_id [String] Recording ID, 39 (yyyymm-&lt;32 id&gt;)
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsCallRecordingGetSingle]
    def v1_account_account_id_recording_recording_id_get(account_id, recording_id, opts = {})
      data, _status_code, _headers = v1_account_account_id_recording_recording_id_get_with_http_info(account_id, recording_id, opts)
      data
    end

    # Get Call Recording Details
    # Access details for each recorded call in an account (e.g., duration, names and numbers of call participants, etc.).
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param recording_id [String] Recording ID, 39 (yyyymm-&lt;32 id&gt;)
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsCallRecordingGetSingle, Integer, Hash)>] ServiceDocsCallRecordingGetSingle data, response status code and response headers
    def v1_account_account_id_recording_recording_id_get_with_http_info(account_id, recording_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallRecordingApi.v1_account_account_id_recording_recording_id_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling CallRecordingApi.v1_account_account_id_recording_recording_id_get"
      end
      # verify the required parameter 'recording_id' is set
      if @api_client.config.client_side_validation && recording_id.nil?
        fail ArgumentError, "Missing the required parameter 'recording_id' when calling CallRecordingApi.v1_account_account_id_recording_recording_id_get"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/recording/{recordingID}'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s)).sub('{' + 'recordingID' + '}', CGI.escape(recording_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'audio/mp3', 'audio/mpeg', 'audio/mpeg3', 'audio/x-wav', 'audio/wav']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsCallRecordingGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"CallRecordingApi.v1_account_account_id_recording_recording_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallRecordingApi#v1_account_account_id_recording_recording_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get User Call Recording
    # Retrieve a list of call recordings for a user within an account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param user_id [String] User ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsCallRecordingGetAll]
    def v1_account_account_id_user_user_id_recording_get(account_id, user_id, opts = {})
      data, _status_code, _headers = v1_account_account_id_user_user_id_recording_get_with_http_info(account_id, user_id, opts)
      data
    end

    # Get User Call Recording
    # Retrieve a list of call recordings for a user within an account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param user_id [String] User ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsCallRecordingGetAll, Integer, Hash)>] ServiceDocsCallRecordingGetAll data, response status code and response headers
    def v1_account_account_id_user_user_id_recording_get_with_http_info(account_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallRecordingApi.v1_account_account_id_user_user_id_recording_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling CallRecordingApi.v1_account_account_id_user_user_id_recording_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling CallRecordingApi.v1_account_account_id_user_user_id_recording_get"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/user/{userID}/recording'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s)).sub('{' + 'userID' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsCallRecordingGetAll'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"CallRecordingApi.v1_account_account_id_user_user_id_recording_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallRecordingApi#v1_account_account_id_user_user_id_recording_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
