=begin
#White Label Communications CPaas API Documentation

#A CPaaS platform API

The version of the OpenAPI document: 1.1
Contact: support@whitelabelcomm.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class ProvisioningApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Family
    # Retrieve a family's details by the randomly generated ID.
    # @param brand [String] brand
    # @param family [String] family
    # @param [Hash] opts the optional parameters
    # @return [ProvisioningDocsDocsFamilyOutputSingle]
    def v1_ap_brand_brand_family_family_get(brand, family, opts = {})
      data, _status_code, _headers = v1_ap_brand_brand_family_family_get_with_http_info(brand, family, opts)
      data
    end

    # Get Family
    # Retrieve a family&#39;s details by the randomly generated ID.
    # @param brand [String] brand
    # @param family [String] family
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProvisioningDocsDocsFamilyOutputSingle, Integer, Hash)>] ProvisioningDocsDocsFamilyOutputSingle data, response status code and response headers
    def v1_ap_brand_brand_family_family_get_with_http_info(brand, family, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProvisioningApi.v1_ap_brand_brand_family_family_get ...'
      end
      # verify the required parameter 'brand' is set
      if @api_client.config.client_side_validation && brand.nil?
        fail ArgumentError, "Missing the required parameter 'brand' when calling ProvisioningApi.v1_ap_brand_brand_family_family_get"
      end
      # verify the required parameter 'family' is set
      if @api_client.config.client_side_validation && family.nil?
        fail ArgumentError, "Missing the required parameter 'family' when calling ProvisioningApi.v1_ap_brand_brand_family_family_get"
      end
      # resource path
      local_var_path = '/v1/ap/brand/{brand}/family/{family}'.sub('{' + 'brand' + '}', CGI.escape(brand.to_s)).sub('{' + 'family' + '}', CGI.escape(family.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProvisioningDocsDocsFamilyOutputSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"ProvisioningApi.v1_ap_brand_brand_family_family_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProvisioningApi#v1_ap_brand_brand_family_family_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Model List
    # Retrieve a list of all models within a family for a brand (e.g., Yealink and Polycom).
    # @param brand [String] brand
    # @param family [String] family
    # @param [Hash] opts the optional parameters
    # @option opts [String] :model_name 
    # @option opts [Integer] :page_size 
    # @option opts [String] :start_key 
    # @option opts [String] :status 
    # @return [ProvisioningDocsDocsModelOutput]
    def v1_ap_brand_brand_family_family_model_get(brand, family, opts = {})
      data, _status_code, _headers = v1_ap_brand_brand_family_family_model_get_with_http_info(brand, family, opts)
      data
    end

    # Get Model List
    # Retrieve a list of all models within a family for a brand (e.g., Yealink and Polycom).
    # @param brand [String] brand
    # @param family [String] family
    # @param [Hash] opts the optional parameters
    # @option opts [String] :model_name 
    # @option opts [Integer] :page_size 
    # @option opts [String] :start_key 
    # @option opts [String] :status 
    # @return [Array<(ProvisioningDocsDocsModelOutput, Integer, Hash)>] ProvisioningDocsDocsModelOutput data, response status code and response headers
    def v1_ap_brand_brand_family_family_model_get_with_http_info(brand, family, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProvisioningApi.v1_ap_brand_brand_family_family_model_get ...'
      end
      # verify the required parameter 'brand' is set
      if @api_client.config.client_side_validation && brand.nil?
        fail ArgumentError, "Missing the required parameter 'brand' when calling ProvisioningApi.v1_ap_brand_brand_family_family_model_get"
      end
      # verify the required parameter 'family' is set
      if @api_client.config.client_side_validation && family.nil?
        fail ArgumentError, "Missing the required parameter 'family' when calling ProvisioningApi.v1_ap_brand_brand_family_family_model_get"
      end
      allowable_values = ["active", "inactive"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/v1/ap/brand/{brand}/family/{family}/model'.sub('{' + 'brand' + '}', CGI.escape(brand.to_s)).sub('{' + 'family' + '}', CGI.escape(family.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'model_name'] = opts[:'model_name'] if !opts[:'model_name'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'start_key'] = opts[:'start_key'] if !opts[:'start_key'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProvisioningDocsDocsModelOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"ProvisioningApi.v1_ap_brand_brand_family_family_model_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProvisioningApi#v1_ap_brand_brand_family_family_model_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Model
    # Retrieve a model's details by the randomly generated ID.
    # @param brand [String] brand
    # @param family [String] family
    # @param model [String] model
    # @param [Hash] opts the optional parameters
    # @return [ProvisioningDocsDocsModelOutputSingle]
    def v1_ap_brand_brand_family_family_model_model_get(brand, family, model, opts = {})
      data, _status_code, _headers = v1_ap_brand_brand_family_family_model_model_get_with_http_info(brand, family, model, opts)
      data
    end

    # Get Model
    # Retrieve a model&#39;s details by the randomly generated ID.
    # @param brand [String] brand
    # @param family [String] family
    # @param model [String] model
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProvisioningDocsDocsModelOutputSingle, Integer, Hash)>] ProvisioningDocsDocsModelOutputSingle data, response status code and response headers
    def v1_ap_brand_brand_family_family_model_model_get_with_http_info(brand, family, model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProvisioningApi.v1_ap_brand_brand_family_family_model_model_get ...'
      end
      # verify the required parameter 'brand' is set
      if @api_client.config.client_side_validation && brand.nil?
        fail ArgumentError, "Missing the required parameter 'brand' when calling ProvisioningApi.v1_ap_brand_brand_family_family_model_model_get"
      end
      # verify the required parameter 'family' is set
      if @api_client.config.client_side_validation && family.nil?
        fail ArgumentError, "Missing the required parameter 'family' when calling ProvisioningApi.v1_ap_brand_brand_family_family_model_model_get"
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling ProvisioningApi.v1_ap_brand_brand_family_family_model_model_get"
      end
      # resource path
      local_var_path = '/v1/ap/brand/{brand}/family/{family}/model/{model}'.sub('{' + 'brand' + '}', CGI.escape(brand.to_s)).sub('{' + 'family' + '}', CGI.escape(family.to_s)).sub('{' + 'model' + '}', CGI.escape(model.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProvisioningDocsDocsModelOutputSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"ProvisioningApi.v1_ap_brand_brand_family_family_model_model_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProvisioningApi#v1_ap_brand_brand_family_family_model_model_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Template List
    # Retrieve a list of all templates for a model within a brand (e.g., Yealink and Polycom).
    # @param brand [String] brand
    # @param family [String] family
    # @param model [String] model
    # @param [Hash] opts the optional parameters
    # @option opts [String] :firmware 
    # @option opts [Integer] :page_size 
    # @option opts [String] :start_key 
    # @option opts [String] :status 
    # @option opts [String] :template_name 
    # @return [ProvisioningDocsDocsTemplatesOutput]
    def v1_ap_brand_brand_family_family_model_model_template_get(brand, family, model, opts = {})
      data, _status_code, _headers = v1_ap_brand_brand_family_family_model_model_template_get_with_http_info(brand, family, model, opts)
      data
    end

    # Get Template List
    # Retrieve a list of all templates for a model within a brand (e.g., Yealink and Polycom).
    # @param brand [String] brand
    # @param family [String] family
    # @param model [String] model
    # @param [Hash] opts the optional parameters
    # @option opts [String] :firmware 
    # @option opts [Integer] :page_size 
    # @option opts [String] :start_key 
    # @option opts [String] :status 
    # @option opts [String] :template_name 
    # @return [Array<(ProvisioningDocsDocsTemplatesOutput, Integer, Hash)>] ProvisioningDocsDocsTemplatesOutput data, response status code and response headers
    def v1_ap_brand_brand_family_family_model_model_template_get_with_http_info(brand, family, model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProvisioningApi.v1_ap_brand_brand_family_family_model_model_template_get ...'
      end
      # verify the required parameter 'brand' is set
      if @api_client.config.client_side_validation && brand.nil?
        fail ArgumentError, "Missing the required parameter 'brand' when calling ProvisioningApi.v1_ap_brand_brand_family_family_model_model_template_get"
      end
      # verify the required parameter 'family' is set
      if @api_client.config.client_side_validation && family.nil?
        fail ArgumentError, "Missing the required parameter 'family' when calling ProvisioningApi.v1_ap_brand_brand_family_family_model_model_template_get"
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling ProvisioningApi.v1_ap_brand_brand_family_family_model_model_template_get"
      end
      allowable_values = ["active", "inactive"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/v1/ap/brand/{brand}/family/{family}/model/{model}/template'.sub('{' + 'brand' + '}', CGI.escape(brand.to_s)).sub('{' + 'family' + '}', CGI.escape(family.to_s)).sub('{' + 'model' + '}', CGI.escape(model.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'firmware'] = opts[:'firmware'] if !opts[:'firmware'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'start_key'] = opts[:'start_key'] if !opts[:'start_key'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'template_name'] = opts[:'template_name'] if !opts[:'template_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProvisioningDocsDocsTemplatesOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"ProvisioningApi.v1_ap_brand_brand_family_family_model_model_template_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProvisioningApi#v1_ap_brand_brand_family_family_model_model_template_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Template
    # Retrieve details about a template for a model by the randomly generated ID.
    # @param brand [String] brand
    # @param family [String] family
    # @param model [String] model
    # @param template [String] template
    # @param [Hash] opts the optional parameters
    # @return [ProvisioningDocsDocsTemplateOutputSingle]
    def v1_ap_brand_brand_family_family_model_model_template_template_get(brand, family, model, template, opts = {})
      data, _status_code, _headers = v1_ap_brand_brand_family_family_model_model_template_template_get_with_http_info(brand, family, model, template, opts)
      data
    end

    # Get Template
    # Retrieve details about a template for a model by the randomly generated ID.
    # @param brand [String] brand
    # @param family [String] family
    # @param model [String] model
    # @param template [String] template
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProvisioningDocsDocsTemplateOutputSingle, Integer, Hash)>] ProvisioningDocsDocsTemplateOutputSingle data, response status code and response headers
    def v1_ap_brand_brand_family_family_model_model_template_template_get_with_http_info(brand, family, model, template, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProvisioningApi.v1_ap_brand_brand_family_family_model_model_template_template_get ...'
      end
      # verify the required parameter 'brand' is set
      if @api_client.config.client_side_validation && brand.nil?
        fail ArgumentError, "Missing the required parameter 'brand' when calling ProvisioningApi.v1_ap_brand_brand_family_family_model_model_template_template_get"
      end
      # verify the required parameter 'family' is set
      if @api_client.config.client_side_validation && family.nil?
        fail ArgumentError, "Missing the required parameter 'family' when calling ProvisioningApi.v1_ap_brand_brand_family_family_model_model_template_template_get"
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling ProvisioningApi.v1_ap_brand_brand_family_family_model_model_template_template_get"
      end
      # verify the required parameter 'template' is set
      if @api_client.config.client_side_validation && template.nil?
        fail ArgumentError, "Missing the required parameter 'template' when calling ProvisioningApi.v1_ap_brand_brand_family_family_model_model_template_template_get"
      end
      # resource path
      local_var_path = '/v1/ap/brand/{brand}/family/{family}/model/{model}/template/{template}'.sub('{' + 'brand' + '}', CGI.escape(brand.to_s)).sub('{' + 'family' + '}', CGI.escape(family.to_s)).sub('{' + 'model' + '}', CGI.escape(model.to_s)).sub('{' + 'template' + '}', CGI.escape(template.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProvisioningDocsDocsTemplateOutputSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"ProvisioningApi.v1_ap_brand_brand_family_family_model_model_template_template_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProvisioningApi#v1_ap_brand_brand_family_family_model_model_template_template_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Family List
    # Retrieve a list of all families for a brand (e.g., Yealink and Polycom).
    # @param brand [String] brand
    # @param [Hash] opts the optional parameters
    # @option opts [String] :family_name 
    # @option opts [Integer] :page_size 
    # @option opts [String] :start_key 
    # @option opts [String] :status 
    # @return [ProvisioningDocsDocsFamilyOutput]
    def v1_ap_brand_brand_family_get(brand, opts = {})
      data, _status_code, _headers = v1_ap_brand_brand_family_get_with_http_info(brand, opts)
      data
    end

    # Get Family List
    # Retrieve a list of all families for a brand (e.g., Yealink and Polycom).
    # @param brand [String] brand
    # @param [Hash] opts the optional parameters
    # @option opts [String] :family_name 
    # @option opts [Integer] :page_size 
    # @option opts [String] :start_key 
    # @option opts [String] :status 
    # @return [Array<(ProvisioningDocsDocsFamilyOutput, Integer, Hash)>] ProvisioningDocsDocsFamilyOutput data, response status code and response headers
    def v1_ap_brand_brand_family_get_with_http_info(brand, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProvisioningApi.v1_ap_brand_brand_family_get ...'
      end
      # verify the required parameter 'brand' is set
      if @api_client.config.client_side_validation && brand.nil?
        fail ArgumentError, "Missing the required parameter 'brand' when calling ProvisioningApi.v1_ap_brand_brand_family_get"
      end
      allowable_values = ["active", "inactive"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/v1/ap/brand/{brand}/family'.sub('{' + 'brand' + '}', CGI.escape(brand.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'family_name'] = opts[:'family_name'] if !opts[:'family_name'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'start_key'] = opts[:'start_key'] if !opts[:'start_key'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProvisioningDocsDocsFamilyOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"ProvisioningApi.v1_ap_brand_brand_family_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProvisioningApi#v1_ap_brand_brand_family_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Brand
    # Retrieve a brand's details by the randomly generated ID.
    # @param brand [String] brand id to retrieve a brand
    # @param [Hash] opts the optional parameters
    # @return [ProvisioningDocsDocsBrandOutputSingle]
    def v1_ap_brand_brand_get(brand, opts = {})
      data, _status_code, _headers = v1_ap_brand_brand_get_with_http_info(brand, opts)
      data
    end

    # Get Brand
    # Retrieve a brand&#39;s details by the randomly generated ID.
    # @param brand [String] brand id to retrieve a brand
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProvisioningDocsDocsBrandOutputSingle, Integer, Hash)>] ProvisioningDocsDocsBrandOutputSingle data, response status code and response headers
    def v1_ap_brand_brand_get_with_http_info(brand, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProvisioningApi.v1_ap_brand_brand_get ...'
      end
      # verify the required parameter 'brand' is set
      if @api_client.config.client_side_validation && brand.nil?
        fail ArgumentError, "Missing the required parameter 'brand' when calling ProvisioningApi.v1_ap_brand_brand_get"
      end
      # resource path
      local_var_path = '/v1/ap/brand/{brand}'.sub('{' + 'brand' + '}', CGI.escape(brand.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProvisioningDocsDocsBrandOutputSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"ProvisioningApi.v1_ap_brand_brand_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProvisioningApi#v1_ap_brand_brand_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Brand
    # Retrieve a list of all brands (e.g., Yealink and Polycom) by client.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :brand_name 
    # @option opts [Integer] :page_size 
    # @option opts [String] :start_key 
    # @option opts [String] :status 
    # @return [ProvisioningDocsDocsBrandsOutput]
    def v1_ap_brand_get(opts = {})
      data, _status_code, _headers = v1_ap_brand_get_with_http_info(opts)
      data
    end

    # Get Brand
    # Retrieve a list of all brands (e.g., Yealink and Polycom) by client.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :brand_name 
    # @option opts [Integer] :page_size 
    # @option opts [String] :start_key 
    # @option opts [String] :status 
    # @return [Array<(ProvisioningDocsDocsBrandsOutput, Integer, Hash)>] ProvisioningDocsDocsBrandsOutput data, response status code and response headers
    def v1_ap_brand_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProvisioningApi.v1_ap_brand_get ...'
      end
      allowable_values = ["active", "inactive"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/v1/ap/brand'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'brand_name'] = opts[:'brand_name'] if !opts[:'brand_name'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'start_key'] = opts[:'start_key'] if !opts[:'start_key'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProvisioningDocsDocsBrandsOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"ProvisioningApi.v1_ap_brand_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProvisioningApi#v1_ap_brand_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate config file
    # Generate a configuration file that includes a list of parameters passed to the specified template_id in the request payload, with populated values returned in the response.
    # @param params [ModelsGenerateConfigFileRequest] body params to generate config file
    # @param [Hash] opts the optional parameters
    # @return [ProvisioningDocsDocsConfigFileOutput]
    def v1_ap_configfile_generate_post(params, opts = {})
      data, _status_code, _headers = v1_ap_configfile_generate_post_with_http_info(params, opts)
      data
    end

    # Generate config file
    # Generate a configuration file that includes a list of parameters passed to the specified template_id in the request payload, with populated values returned in the response.
    # @param params [ModelsGenerateConfigFileRequest] body params to generate config file
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProvisioningDocsDocsConfigFileOutput, Integer, Hash)>] ProvisioningDocsDocsConfigFileOutput data, response status code and response headers
    def v1_ap_configfile_generate_post_with_http_info(params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProvisioningApi.v1_ap_configfile_generate_post ...'
      end
      # verify the required parameter 'params' is set
      if @api_client.config.client_side_validation && params.nil?
        fail ArgumentError, "Missing the required parameter 'params' when calling ProvisioningApi.v1_ap_configfile_generate_post"
      end
      # resource path
      local_var_path = '/v1/ap/configfile/generate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(params)

      # return_type
      return_type = opts[:debug_return_type] || 'ProvisioningDocsDocsConfigFileOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"ProvisioningApi.v1_ap_configfile_generate_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProvisioningApi#v1_ap_configfile_generate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
