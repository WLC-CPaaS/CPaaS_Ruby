=begin
#White Label Communications CPaas API Documentation

#A CPaaS platform API

The version of the OpenAPI document: 1.1
Contact: support@whitelabelcomm.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class AccountApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Sub Account List
    # Conveniently access the list of children accounts.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_key start_key for pagination that was returned as next_start_key from your previous call
    # @option opts [Integer] :page_size number of records to return, range 1 to 50
    # @return [ServiceDocsAccountGetAll]
    def v1_account_accountid_children_get(accountid, opts = {})
      data, _status_code, _headers = v1_account_accountid_children_get_with_http_info(accountid, opts)
      data
    end

    # Get Sub Account List
    # Conveniently access the list of children accounts.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_key start_key for pagination that was returned as next_start_key from your previous call
    # @option opts [Integer] :page_size number of records to return, range 1 to 50
    # @return [Array<(ServiceDocsAccountGetAll, Integer, Hash)>] ServiceDocsAccountGetAll data, response status code and response headers
    def v1_account_accountid_children_get_with_http_info(accountid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.v1_account_accountid_children_get ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling AccountApi.v1_account_accountid_children_get"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}/children'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_key'] = opts[:'start_key'] if !opts[:'start_key'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsAccountGetAll'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"AccountApi.v1_account_accountid_children_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#v1_account_accountid_children_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Account
    # Delete an account within your organization.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsAccountGetSingle]
    def v1_account_accountid_delete(accountid, opts = {})
      data, _status_code, _headers = v1_account_accountid_delete_with_http_info(accountid, opts)
      data
    end

    # Delete Account
    # Delete an account within your organization.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsAccountGetSingle, Integer, Hash)>] ServiceDocsAccountGetSingle data, response status code and response headers
    def v1_account_accountid_delete_with_http_info(accountid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.v1_account_accountid_delete ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling AccountApi.v1_account_accountid_delete"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsAccountGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"AccountApi.v1_account_accountid_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#v1_account_accountid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Account DNS Record
    # Get the DNS record of an account from the Route 53 entry.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsAccountGetSingle]
    def v1_account_accountid_dnsrecord_get(accountid, opts = {})
      data, _status_code, _headers = v1_account_accountid_dnsrecord_get_with_http_info(accountid, opts)
      data
    end

    # Get Account DNS Record
    # Get the DNS record of an account from the Route 53 entry.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsAccountGetSingle, Integer, Hash)>] ServiceDocsAccountGetSingle data, response status code and response headers
    def v1_account_accountid_dnsrecord_get_with_http_info(accountid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.v1_account_accountid_dnsrecord_get ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling AccountApi.v1_account_accountid_dnsrecord_get"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}/dnsrecord'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsAccountGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"AccountApi.v1_account_accountid_dnsrecord_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#v1_account_accountid_dnsrecord_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Account DNS Record
    # Create the DNS record of an account with the help realm in the Route 53 entry.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsAccountGetSingle]
    def v1_account_accountid_dnsrecord_post(accountid, opts = {})
      data, _status_code, _headers = v1_account_accountid_dnsrecord_post_with_http_info(accountid, opts)
      data
    end

    # Create Account DNS Record
    # Create the DNS record of an account with the help realm in the Route 53 entry.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsAccountGetSingle, Integer, Hash)>] ServiceDocsAccountGetSingle data, response status code and response headers
    def v1_account_accountid_dnsrecord_post_with_http_info(accountid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.v1_account_accountid_dnsrecord_post ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling AccountApi.v1_account_accountid_dnsrecord_post"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}/dnsrecord'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsAccountGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"AccountApi.v1_account_accountid_dnsrecord_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#v1_account_accountid_dnsrecord_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Convert Account DNS Record
    # Toggle the realm DNS record between srv and cname.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param dnsrecord [ServiceUpdateRecordTypeForAccount] record type fields with value SRV, CNAME
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsAccountGetSingle]
    def v1_account_accountid_dnsrecord_put(accountid, dnsrecord, opts = {})
      data, _status_code, _headers = v1_account_accountid_dnsrecord_put_with_http_info(accountid, dnsrecord, opts)
      data
    end

    # Convert Account DNS Record
    # Toggle the realm DNS record between srv and cname.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param dnsrecord [ServiceUpdateRecordTypeForAccount] record type fields with value SRV, CNAME
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsAccountGetSingle, Integer, Hash)>] ServiceDocsAccountGetSingle data, response status code and response headers
    def v1_account_accountid_dnsrecord_put_with_http_info(accountid, dnsrecord, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.v1_account_accountid_dnsrecord_put ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling AccountApi.v1_account_accountid_dnsrecord_put"
      end
      # verify the required parameter 'dnsrecord' is set
      if @api_client.config.client_side_validation && dnsrecord.nil?
        fail ArgumentError, "Missing the required parameter 'dnsrecord' when calling AccountApi.v1_account_accountid_dnsrecord_put"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}/dnsrecord'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(dnsrecord)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsAccountGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"AccountApi.v1_account_accountid_dnsrecord_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#v1_account_accountid_dnsrecord_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Account Details
    # This endpoint will not allow for modifying or making updates, it will only allow users to view/retrieve details.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsAccountGetSingle]
    def v1_account_accountid_get(accountid, opts = {})
      data, _status_code, _headers = v1_account_accountid_get_with_http_info(accountid, opts)
      data
    end

    # Get Account Details
    # This endpoint will not allow for modifying or making updates, it will only allow users to view/retrieve details.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsAccountGetSingle, Integer, Hash)>] ServiceDocsAccountGetSingle data, response status code and response headers
    def v1_account_accountid_get_with_http_info(accountid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.v1_account_accountid_get ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling AccountApi.v1_account_accountid_get"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsAccountGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"AccountApi.v1_account_accountid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#v1_account_accountid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Account Limits
    # Check the maximum number of inbound, outbound, and two-way trunks.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsAccountLimit]
    def v1_account_accountid_limit_get(accountid, opts = {})
      data, _status_code, _headers = v1_account_accountid_limit_get_with_http_info(accountid, opts)
      data
    end

    # Get Account Limits
    # Check the maximum number of inbound, outbound, and two-way trunks.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsAccountLimit, Integer, Hash)>] ServiceDocsAccountLimit data, response status code and response headers
    def v1_account_accountid_limit_get_with_http_info(accountid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.v1_account_accountid_limit_get ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling AccountApi.v1_account_accountid_limit_get"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}/limit'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsAccountLimit'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"AccountApi.v1_account_accountid_limit_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#v1_account_accountid_limit_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set Account Limits
    # Apply parameters to restrict access to inbound, outbound, and two-way trunks.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param limit [ServiceVOIPAccountLimit2] account fields
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsAccountLimit]
    def v1_account_accountid_limit_put(accountid, limit, opts = {})
      data, _status_code, _headers = v1_account_accountid_limit_put_with_http_info(accountid, limit, opts)
      data
    end

    # Set Account Limits
    # Apply parameters to restrict access to inbound, outbound, and two-way trunks.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param limit [ServiceVOIPAccountLimit2] account fields
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsAccountLimit, Integer, Hash)>] ServiceDocsAccountLimit data, response status code and response headers
    def v1_account_accountid_limit_put_with_http_info(accountid, limit, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.v1_account_accountid_limit_put ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling AccountApi.v1_account_accountid_limit_put"
      end
      # verify the required parameter 'limit' is set
      if @api_client.config.client_side_validation && limit.nil?
        fail ArgumentError, "Missing the required parameter 'limit' when calling AccountApi.v1_account_accountid_limit_put"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}/limit'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(limit)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsAccountLimit'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"AccountApi.v1_account_accountid_limit_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#v1_account_accountid_limit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Sub Account
    # Establish a sub account to enable an administrator within your organization to create accounts.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param account [ServiceVOIPAccountAddData] account fields
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsAccountGetSingle]
    def v1_account_accountid_post(accountid, account, opts = {})
      data, _status_code, _headers = v1_account_accountid_post_with_http_info(accountid, account, opts)
      data
    end

    # Create Sub Account
    # Establish a sub account to enable an administrator within your organization to create accounts.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param account [ServiceVOIPAccountAddData] account fields
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsAccountGetSingle, Integer, Hash)>] ServiceDocsAccountGetSingle data, response status code and response headers
    def v1_account_accountid_post_with_http_info(accountid, account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.v1_account_accountid_post ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling AccountApi.v1_account_accountid_post"
      end
      # verify the required parameter 'account' is set
      if @api_client.config.client_side_validation && account.nil?
        fail ArgumentError, "Missing the required parameter 'account' when calling AccountApi.v1_account_accountid_post"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(account)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsAccountGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"AccountApi.v1_account_accountid_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#v1_account_accountid_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Account Provisioning Details
    # Get the provisioning details of an account.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsAccountProvisioning]
    def v1_account_accountid_provisioningdetails_get(accountid, opts = {})
      data, _status_code, _headers = v1_account_accountid_provisioningdetails_get_with_http_info(accountid, opts)
      data
    end

    # Get Account Provisioning Details
    # Get the provisioning details of an account.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsAccountProvisioning, Integer, Hash)>] ServiceDocsAccountProvisioning data, response status code and response headers
    def v1_account_accountid_provisioningdetails_get_with_http_info(accountid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.v1_account_accountid_provisioningdetails_get ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling AccountApi.v1_account_accountid_provisioningdetails_get"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}/provisioningdetails'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsAccountProvisioning'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"AccountApi.v1_account_accountid_provisioningdetails_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#v1_account_accountid_provisioningdetails_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset the provisioning details password.
    # Reset the existing provisioning details password and set it to a new one.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsAccountProvisioning]
    def v1_account_accountid_provisioningdetails_resetpw_put(accountid, opts = {})
      data, _status_code, _headers = v1_account_accountid_provisioningdetails_resetpw_put_with_http_info(accountid, opts)
      data
    end

    # Reset the provisioning details password.
    # Reset the existing provisioning details password and set it to a new one.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsAccountProvisioning, Integer, Hash)>] ServiceDocsAccountProvisioning data, response status code and response headers
    def v1_account_accountid_provisioningdetails_resetpw_put_with_http_info(accountid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.v1_account_accountid_provisioningdetails_resetpw_put ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling AccountApi.v1_account_accountid_provisioningdetails_resetpw_put"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}/provisioningdetails/resetpw'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsAccountProvisioning'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"AccountApi.v1_account_accountid_provisioningdetails_resetpw_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#v1_account_accountid_provisioningdetails_resetpw_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Account
    # Modify pertinent account data.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param account [ServiceVOIPAccountEditData] account fields
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsAccountGetSingle]
    def v1_account_accountid_put(accountid, account, opts = {})
      data, _status_code, _headers = v1_account_accountid_put_with_http_info(accountid, account, opts)
      data
    end

    # Update Account
    # Modify pertinent account data.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param account [ServiceVOIPAccountEditData] account fields
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsAccountGetSingle, Integer, Hash)>] ServiceDocsAccountGetSingle data, response status code and response headers
    def v1_account_accountid_put_with_http_info(accountid, account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.v1_account_accountid_put ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling AccountApi.v1_account_accountid_put"
      end
      # verify the required parameter 'account' is set
      if @api_client.config.client_side_validation && account.nil?
        fail ArgumentError, "Missing the required parameter 'account' when calling AccountApi.v1_account_accountid_put"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(account)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsAccountGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"AccountApi.v1_account_accountid_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#v1_account_accountid_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Authenticate an application or user request to get the client ID and client secret for a CPaaS account.
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsAccountAPIKey]
    def v1_account_apikey_get(opts = {})
      data, _status_code, _headers = v1_account_apikey_get_with_http_info(opts)
      data
    end

    # Authenticate an application or user request to get the client ID and client secret for a CPaaS account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsAccountAPIKey, Integer, Hash)>] ServiceDocsAccountAPIKey data, response status code and response headers
    def v1_account_apikey_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.v1_account_apikey_get ...'
      end
      # resource path
      local_var_path = '/v1/account/apikey'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsAccountAPIKey'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"AccountApi.v1_account_apikey_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#v1_account_apikey_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Account List
    # Retrieve a list of all CPaaS accounts that exist within your organization.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_key start_key for pagination that was returned as next_start_key from your previous call
    # @option opts [Integer] :page_size number of records to return, range 1 to 50
    # @return [ServiceDocsAccountGetAll]
    def v1_account_get(opts = {})
      data, _status_code, _headers = v1_account_get_with_http_info(opts)
      data
    end

    # Get Account List
    # Retrieve a list of all CPaaS accounts that exist within your organization.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_key start_key for pagination that was returned as next_start_key from your previous call
    # @option opts [Integer] :page_size number of records to return, range 1 to 50
    # @return [Array<(ServiceDocsAccountGetAll, Integer, Hash)>] ServiceDocsAccountGetAll data, response status code and response headers
    def v1_account_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.v1_account_get ...'
      end
      # resource path
      local_var_path = '/v1/account'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_key'] = opts[:'start_key'] if !opts[:'start_key'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsAccountGetAll'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"AccountApi.v1_account_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#v1_account_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Account
    # Create an account.
    # @param account [ServiceVOIPAccountAddData] account fields
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsAccountGetSingle]
    def v1_account_post(account, opts = {})
      data, _status_code, _headers = v1_account_post_with_http_info(account, opts)
      data
    end

    # Create Account
    # Create an account.
    # @param account [ServiceVOIPAccountAddData] account fields
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsAccountGetSingle, Integer, Hash)>] ServiceDocsAccountGetSingle data, response status code and response headers
    def v1_account_post_with_http_info(account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.v1_account_post ...'
      end
      # verify the required parameter 'account' is set
      if @api_client.config.client_side_validation && account.nil?
        fail ArgumentError, "Missing the required parameter 'account' when calling AccountApi.v1_account_post"
      end
      # resource path
      local_var_path = '/v1/account'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(account)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsAccountGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"AccountApi.v1_account_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#v1_account_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
