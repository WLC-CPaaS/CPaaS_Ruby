=begin
#White Label Communications CPaas API Documentation

#A CPaaS platform API

The version of the OpenAPI document: 1.1
Contact: support@whitelabelcomm.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class E911Api
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get E911 List
    # Obtain e911 URIs associated with the provided account ID.
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsE911URIsApiOutput]
    def v1_e911_get(opts = {})
      data, _status_code, _headers = v1_e911_get_with_http_info(opts)
      data
    end

    # Get E911 List
    # Obtain e911 URIs associated with the provided account ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsE911URIsApiOutput, Integer, Hash)>] ServiceDocsE911URIsApiOutput data, response status code and response headers
    def v1_e911_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: E911Api.v1_e911_get ...'
      end
      # resource path
      local_var_path = '/v1/e911'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsE911URIsApiOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"E911Api.v1_e911_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: E911Api#v1_e911_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Activate E911 Location
    # Edit the provision location.
    # @param location_id [String] Location ID
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsE911ActiveLocationOutput]
    def v1_e911_location_location_id_activate_put(location_id, opts = {})
      data, _status_code, _headers = v1_e911_location_location_id_activate_put_with_http_info(location_id, opts)
      data
    end

    # Activate E911 Location
    # Edit the provision location.
    # @param location_id [String] Location ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsE911ActiveLocationOutput, Integer, Hash)>] ServiceDocsE911ActiveLocationOutput data, response status code and response headers
    def v1_e911_location_location_id_activate_put_with_http_info(location_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: E911Api.v1_e911_location_location_id_activate_put ...'
      end
      # verify the required parameter 'location_id' is set
      if @api_client.config.client_side_validation && location_id.nil?
        fail ArgumentError, "Missing the required parameter 'location_id' when calling E911Api.v1_e911_location_location_id_activate_put"
      end
      # resource path
      local_var_path = '/v1/e911/location/{locationID}/activate'.sub('{' + 'locationID' + '}', CGI.escape(location_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsE911ActiveLocationOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"E911Api.v1_e911_location_location_id_activate_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: E911Api#v1_e911_location_location_id_activate_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete E911 Location
    # Remove the location.
    # @param location_id [String] Location ID
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsE911RemoveLocationOutput]
    def v1_e911_location_location_id_delete(location_id, opts = {})
      data, _status_code, _headers = v1_e911_location_location_id_delete_with_http_info(location_id, opts)
      data
    end

    # Delete E911 Location
    # Remove the location.
    # @param location_id [String] Location ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsE911RemoveLocationOutput, Integer, Hash)>] ServiceDocsE911RemoveLocationOutput data, response status code and response headers
    def v1_e911_location_location_id_delete_with_http_info(location_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: E911Api.v1_e911_location_location_id_delete ...'
      end
      # verify the required parameter 'location_id' is set
      if @api_client.config.client_side_validation && location_id.nil?
        fail ArgumentError, "Missing the required parameter 'location_id' when calling E911Api.v1_e911_location_location_id_delete"
      end
      # resource path
      local_var_path = '/v1/e911/location/{locationID}'.sub('{' + 'locationID' + '}', CGI.escape(location_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsE911RemoveLocationOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"E911Api.v1_e911_location_location_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: E911Api#v1_e911_location_location_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate a Location
    # Validate the location details.
    # @param req_body [ServiceE911ValidateLocationInput] location details
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsE911ValidateLocationOutput]
    def v1_e911_location_validate_put(req_body, opts = {})
      data, _status_code, _headers = v1_e911_location_validate_put_with_http_info(req_body, opts)
      data
    end

    # Validate a Location
    # Validate the location details.
    # @param req_body [ServiceE911ValidateLocationInput] location details
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsE911ValidateLocationOutput, Integer, Hash)>] ServiceDocsE911ValidateLocationOutput data, response status code and response headers
    def v1_e911_location_validate_put_with_http_info(req_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: E911Api.v1_e911_location_validate_put ...'
      end
      # verify the required parameter 'req_body' is set
      if @api_client.config.client_side_validation && req_body.nil?
        fail ArgumentError, "Missing the required parameter 'req_body' when calling E911Api.v1_e911_location_validate_put"
      end
      # resource path
      local_var_path = '/v1/e911/location/validate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(req_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsE911ValidateLocationOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"E911Api.v1_e911_location_validate_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: E911Api#v1_e911_location_validate_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete E911 Phone Number
    # Delete the e911 URI connected with the account URI.
    # @param phone_number [String] Phone Number
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsE911RemoveURIApiOutput]
    def v1_e911_phone_number_delete(phone_number, opts = {})
      data, _status_code, _headers = v1_e911_phone_number_delete_with_http_info(phone_number, opts)
      data
    end

    # Delete E911 Phone Number
    # Delete the e911 URI connected with the account URI.
    # @param phone_number [String] Phone Number
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsE911RemoveURIApiOutput, Integer, Hash)>] ServiceDocsE911RemoveURIApiOutput data, response status code and response headers
    def v1_e911_phone_number_delete_with_http_info(phone_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: E911Api.v1_e911_phone_number_delete ...'
      end
      # verify the required parameter 'phone_number' is set
      if @api_client.config.client_side_validation && phone_number.nil?
        fail ArgumentError, "Missing the required parameter 'phone_number' when calling E911Api.v1_e911_phone_number_delete"
      end
      # resource path
      local_var_path = '/v1/e911/{phoneNumber}'.sub('{' + 'phoneNumber' + '}', CGI.escape(phone_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsE911RemoveURIApiOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"E911Api.v1_e911_phone_number_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: E911Api#v1_e911_phone_number_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Actvie Location for a Phone Number
    # Get the e911 location connected with the URI.
    # @param phone_number [String] Phone Number
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsE911ActiveLocationURIApiOutput]
    def v1_e911_phone_number_location_active_get(phone_number, opts = {})
      data, _status_code, _headers = v1_e911_phone_number_location_active_get_with_http_info(phone_number, opts)
      data
    end

    # Get Actvie Location for a Phone Number
    # Get the e911 location connected with the URI.
    # @param phone_number [String] Phone Number
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsE911ActiveLocationURIApiOutput, Integer, Hash)>] ServiceDocsE911ActiveLocationURIApiOutput data, response status code and response headers
    def v1_e911_phone_number_location_active_get_with_http_info(phone_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: E911Api.v1_e911_phone_number_location_active_get ...'
      end
      # verify the required parameter 'phone_number' is set
      if @api_client.config.client_side_validation && phone_number.nil?
        fail ArgumentError, "Missing the required parameter 'phone_number' when calling E911Api.v1_e911_phone_number_location_active_get"
      end
      # resource path
      local_var_path = '/v1/e911/{phoneNumber}/location/active'.sub('{' + 'phoneNumber' + '}', CGI.escape(phone_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsE911ActiveLocationURIApiOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"E911Api.v1_e911_phone_number_location_active_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: E911Api#v1_e911_phone_number_location_active_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Location List for Phone Number
    # Access a list of the e911 locations associated with the provided URI.
    # @param phone_number [String] Phone Number
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsE911LocationsURIApiOutput]
    def v1_e911_phone_number_location_get(phone_number, opts = {})
      data, _status_code, _headers = v1_e911_phone_number_location_get_with_http_info(phone_number, opts)
      data
    end

    # Get Location List for Phone Number
    # Access a list of the e911 locations associated with the provided URI.
    # @param phone_number [String] Phone Number
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsE911LocationsURIApiOutput, Integer, Hash)>] ServiceDocsE911LocationsURIApiOutput data, response status code and response headers
    def v1_e911_phone_number_location_get_with_http_info(phone_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: E911Api.v1_e911_phone_number_location_get ...'
      end
      # verify the required parameter 'phone_number' is set
      if @api_client.config.client_side_validation && phone_number.nil?
        fail ArgumentError, "Missing the required parameter 'phone_number' when calling E911Api.v1_e911_phone_number_location_get"
      end
      # resource path
      local_var_path = '/v1/e911/{phoneNumber}/location'.sub('{' + 'phoneNumber' + '}', CGI.escape(phone_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsE911LocationsURIApiOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"E911Api.v1_e911_phone_number_location_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: E911Api#v1_e911_phone_number_location_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an E911 Location
    # Enter new location details.
    # @param req_body [ServiceE911AddLocationInput] location details
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsE911AddLocationOutput]
    def v1_e911_post(req_body, opts = {})
      data, _status_code, _headers = v1_e911_post_with_http_info(req_body, opts)
      data
    end

    # Create an E911 Location
    # Enter new location details.
    # @param req_body [ServiceE911AddLocationInput] location details
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsE911AddLocationOutput, Integer, Hash)>] ServiceDocsE911AddLocationOutput data, response status code and response headers
    def v1_e911_post_with_http_info(req_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: E911Api.v1_e911_post ...'
      end
      # verify the required parameter 'req_body' is set
      if @api_client.config.client_side_validation && req_body.nil?
        fail ArgumentError, "Missing the required parameter 'req_body' when calling E911Api.v1_e911_post"
      end
      # resource path
      local_var_path = '/v1/e911'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(req_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsE911AddLocationOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"E911Api.v1_e911_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: E911Api#v1_e911_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
