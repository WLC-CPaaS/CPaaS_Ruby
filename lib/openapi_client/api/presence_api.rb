=begin
#White Label Communications CPaas API Documentation

#A CPaaS platform API

The version of the OpenAPI document: 1.1
Contact: support@whitelabelcomm.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class PresenceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Set/Reset Presence for Extension
    # Set or reset the presence status of an extension.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param extension [String] Extension
    # @param req_body [ServiceVOIPPresenceSetResetEditData] payload fields
    # @param [Hash] opts the optional parameters
    # @return [ServiceAPIResponse]
    def v1_account_account_id_presence_extension_put(account_id, extension, req_body, opts = {})
      data, _status_code, _headers = v1_account_account_id_presence_extension_put_with_http_info(account_id, extension, req_body, opts)
      data
    end

    # Set/Reset Presence for Extension
    # Set or reset the presence status of an extension.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param extension [String] Extension
    # @param req_body [ServiceVOIPPresenceSetResetEditData] payload fields
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceAPIResponse, Integer, Hash)>] ServiceAPIResponse data, response status code and response headers
    def v1_account_account_id_presence_extension_put_with_http_info(account_id, extension, req_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PresenceApi.v1_account_account_id_presence_extension_put ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling PresenceApi.v1_account_account_id_presence_extension_put"
      end
      # verify the required parameter 'extension' is set
      if @api_client.config.client_side_validation && extension.nil?
        fail ArgumentError, "Missing the required parameter 'extension' when calling PresenceApi.v1_account_account_id_presence_extension_put"
      end
      # verify the required parameter 'req_body' is set
      if @api_client.config.client_side_validation && req_body.nil?
        fail ArgumentError, "Missing the required parameter 'req_body' when calling PresenceApi.v1_account_account_id_presence_extension_put"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/presence/{extension}'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s)).sub('{' + 'extension' + '}', CGI.escape(extension.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(req_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceAPIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"PresenceApi.v1_account_account_id_presence_extension_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PresenceApi#v1_account_account_id_presence_extension_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Presence Details
    # Retrieve details of presence subscriptions in an account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsPresenceGet]
    def v1_account_account_id_presence_get(account_id, opts = {})
      data, _status_code, _headers = v1_account_account_id_presence_get_with_http_info(account_id, opts)
      data
    end

    # Get Presence Details
    # Retrieve details of presence subscriptions in an account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsPresenceGet, Integer, Hash)>] ServiceDocsPresenceGet data, response status code and response headers
    def v1_account_account_id_presence_get_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PresenceApi.v1_account_account_id_presence_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling PresenceApi.v1_account_account_id_presence_get"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/presence'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsPresenceGet'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"PresenceApi.v1_account_account_id_presence_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PresenceApi#v1_account_account_id_presence_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set/Reset Presence for User
    # Set or reset the presence status of a user within an account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param user_id [String] User ID, 32 alpha numeric
    # @param req_body [ServiceVOIPPresenceSetResetEditData] payload fields
    # @param [Hash] opts the optional parameters
    # @return [ServiceAPIResponse]
    def v1_account_account_id_user_user_id_presence_put(account_id, user_id, req_body, opts = {})
      data, _status_code, _headers = v1_account_account_id_user_user_id_presence_put_with_http_info(account_id, user_id, req_body, opts)
      data
    end

    # Set/Reset Presence for User
    # Set or reset the presence status of a user within an account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param user_id [String] User ID, 32 alpha numeric
    # @param req_body [ServiceVOIPPresenceSetResetEditData] payload fields
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceAPIResponse, Integer, Hash)>] ServiceAPIResponse data, response status code and response headers
    def v1_account_account_id_user_user_id_presence_put_with_http_info(account_id, user_id, req_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PresenceApi.v1_account_account_id_user_user_id_presence_put ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling PresenceApi.v1_account_account_id_user_user_id_presence_put"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling PresenceApi.v1_account_account_id_user_user_id_presence_put"
      end
      # verify the required parameter 'req_body' is set
      if @api_client.config.client_side_validation && req_body.nil?
        fail ArgumentError, "Missing the required parameter 'req_body' when calling PresenceApi.v1_account_account_id_user_user_id_presence_put"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/user/{userID}/presence'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s)).sub('{' + 'userID' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(req_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceAPIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"PresenceApi.v1_account_account_id_user_user_id_presence_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PresenceApi#v1_account_account_id_user_user_id_presence_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
