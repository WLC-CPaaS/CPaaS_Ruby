=begin
#White Label Communications CPaas API Documentation

#A CPaaS platform API

The version of the OpenAPI document: 1.1
Contact: support@whitelabelcomm.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class WebhookApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Webhook List
    # Retrieve the webhook list in an account.
    # @param account_id [String] Account ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size number of records to return, range 1 to 50
    # @option opts [Integer] :current_page Current Page
    # @return [ServiceDocsWebhookGetAll]
    def v1_webhook_account_account_id_get(account_id, opts = {})
      data, _status_code, _headers = v1_webhook_account_account_id_get_with_http_info(account_id, opts)
      data
    end

    # Get Webhook List
    # Retrieve the webhook list in an account.
    # @param account_id [String] Account ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size number of records to return, range 1 to 50
    # @option opts [Integer] :current_page Current Page
    # @return [Array<(ServiceDocsWebhookGetAll, Integer, Hash)>] ServiceDocsWebhookGetAll data, response status code and response headers
    def v1_webhook_account_account_id_get_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookApi.v1_webhook_account_account_id_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling WebhookApi.v1_webhook_account_account_id_get"
      end
      # resource path
      local_var_path = '/v1/webhook/account/{accountID}'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'current_page'] = opts[:'current_page'] if !opts[:'current_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsWebhookGetAll'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"WebhookApi.v1_webhook_account_account_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#v1_webhook_account_account_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Webhook
    # Create a webhook for a specific account ID.
    # @param account_id [String] Account ID
    # @param body [ServiceWebhookAdd] Webhook data
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsWebhookGetSingle]
    def v1_webhook_account_account_id_post(account_id, body, opts = {})
      data, _status_code, _headers = v1_webhook_account_account_id_post_with_http_info(account_id, body, opts)
      data
    end

    # Create Webhook
    # Create a webhook for a specific account ID.
    # @param account_id [String] Account ID
    # @param body [ServiceWebhookAdd] Webhook data
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsWebhookGetSingle, Integer, Hash)>] ServiceDocsWebhookGetSingle data, response status code and response headers
    def v1_webhook_account_account_id_post_with_http_info(account_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookApi.v1_webhook_account_account_id_post ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling WebhookApi.v1_webhook_account_account_id_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling WebhookApi.v1_webhook_account_account_id_post"
      end
      # resource path
      local_var_path = '/v1/webhook/account/{accountID}'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsWebhookGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"WebhookApi.v1_webhook_account_account_id_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#v1_webhook_account_account_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Webhook
    # Remove a webhook identified by its ID for a particular account ID.
    # @param account_id [String] Account ID
    # @param webhook_id [Integer] Webhook ID
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsWebhookDelete]
    def v1_webhook_account_account_id_webhook_id_delete(account_id, webhook_id, opts = {})
      data, _status_code, _headers = v1_webhook_account_account_id_webhook_id_delete_with_http_info(account_id, webhook_id, opts)
      data
    end

    # Delete Webhook
    # Remove a webhook identified by its ID for a particular account ID.
    # @param account_id [String] Account ID
    # @param webhook_id [Integer] Webhook ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsWebhookDelete, Integer, Hash)>] ServiceDocsWebhookDelete data, response status code and response headers
    def v1_webhook_account_account_id_webhook_id_delete_with_http_info(account_id, webhook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookApi.v1_webhook_account_account_id_webhook_id_delete ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling WebhookApi.v1_webhook_account_account_id_webhook_id_delete"
      end
      # verify the required parameter 'webhook_id' is set
      if @api_client.config.client_side_validation && webhook_id.nil?
        fail ArgumentError, "Missing the required parameter 'webhook_id' when calling WebhookApi.v1_webhook_account_account_id_webhook_id_delete"
      end
      # resource path
      local_var_path = '/v1/webhook/account/{accountID}/{webhookID}'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s)).sub('{' + 'webhookID' + '}', CGI.escape(webhook_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsWebhookDelete'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"WebhookApi.v1_webhook_account_account_id_webhook_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#v1_webhook_account_account_id_webhook_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Webhook Details
    # Access details about a single webhook ID for an individual account ID.
    # @param account_id [String] Account ID
    # @param webhook_id [Integer] Webhook ID
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsWebhookGetSingle]
    def v1_webhook_account_account_id_webhook_id_get(account_id, webhook_id, opts = {})
      data, _status_code, _headers = v1_webhook_account_account_id_webhook_id_get_with_http_info(account_id, webhook_id, opts)
      data
    end

    # Get Webhook Details
    # Access details about a single webhook ID for an individual account ID.
    # @param account_id [String] Account ID
    # @param webhook_id [Integer] Webhook ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsWebhookGetSingle, Integer, Hash)>] ServiceDocsWebhookGetSingle data, response status code and response headers
    def v1_webhook_account_account_id_webhook_id_get_with_http_info(account_id, webhook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookApi.v1_webhook_account_account_id_webhook_id_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling WebhookApi.v1_webhook_account_account_id_webhook_id_get"
      end
      # verify the required parameter 'webhook_id' is set
      if @api_client.config.client_side_validation && webhook_id.nil?
        fail ArgumentError, "Missing the required parameter 'webhook_id' when calling WebhookApi.v1_webhook_account_account_id_webhook_id_get"
      end
      # resource path
      local_var_path = '/v1/webhook/account/{accountID}/{webhookID}'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s)).sub('{' + 'webhookID' + '}', CGI.escape(webhook_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsWebhookGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"WebhookApi.v1_webhook_account_account_id_webhook_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#v1_webhook_account_account_id_webhook_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Webhook
    # Update a webhook identified by its ID for a distinct account ID.
    # @param account_id [String] Account ID
    # @param webhook_id [String] Webhook ID
    # @param body [ServiceWebhookEdit] Updated webhook data
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsWebhookGetSingle]
    def v1_webhook_account_account_id_webhook_id_put(account_id, webhook_id, body, opts = {})
      data, _status_code, _headers = v1_webhook_account_account_id_webhook_id_put_with_http_info(account_id, webhook_id, body, opts)
      data
    end

    # Update Webhook
    # Update a webhook identified by its ID for a distinct account ID.
    # @param account_id [String] Account ID
    # @param webhook_id [String] Webhook ID
    # @param body [ServiceWebhookEdit] Updated webhook data
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsWebhookGetSingle, Integer, Hash)>] ServiceDocsWebhookGetSingle data, response status code and response headers
    def v1_webhook_account_account_id_webhook_id_put_with_http_info(account_id, webhook_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhookApi.v1_webhook_account_account_id_webhook_id_put ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling WebhookApi.v1_webhook_account_account_id_webhook_id_put"
      end
      # verify the required parameter 'webhook_id' is set
      if @api_client.config.client_side_validation && webhook_id.nil?
        fail ArgumentError, "Missing the required parameter 'webhook_id' when calling WebhookApi.v1_webhook_account_account_id_webhook_id_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling WebhookApi.v1_webhook_account_account_id_webhook_id_put"
      end
      # resource path
      local_var_path = '/v1/webhook/account/{accountID}/{webhookID}'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s)).sub('{' + 'webhookID' + '}', CGI.escape(webhook_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsWebhookGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"WebhookApi.v1_webhook_account_account_id_webhook_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#v1_webhook_account_account_id_webhook_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
