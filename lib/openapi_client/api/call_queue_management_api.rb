=begin
#White Label Communications CPaas API Documentation

#A CPaaS platform API

The version of the OpenAPI document: 1.1
Contact: support@whitelabelcomm.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class CallQueueManagementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Call Queues
    # Retrieve call queue details for an account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsCallQueueGetAll]
    def v1_account_account_id_callqueue_get(account_id, opts = {})
      data, _status_code, _headers = v1_account_account_id_callqueue_get_with_http_info(account_id, opts)
      data
    end

    # Get Call Queues
    # Retrieve call queue details for an account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsCallQueueGetAll, Integer, Hash)>] ServiceDocsCallQueueGetAll data, response status code and response headers
    def v1_account_account_id_callqueue_get_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallQueueManagementApi.v1_account_account_id_callqueue_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling CallQueueManagementApi.v1_account_account_id_callqueue_get"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/callqueue'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsCallQueueGetAll'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"CallQueueManagementApi.v1_account_account_id_callqueue_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallQueueManagementApi#v1_account_account_id_callqueue_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Call Queue
    # Set up a call queue in an account for specific inbound calls.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param req_body [ServiceVOIPCallQueueAddEditData] payload fields
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsCallQueueGetSingle]
    def v1_account_account_id_callqueue_post(account_id, req_body, opts = {})
      data, _status_code, _headers = v1_account_account_id_callqueue_post_with_http_info(account_id, req_body, opts)
      data
    end

    # Create Call Queue
    # Set up a call queue in an account for specific inbound calls.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param req_body [ServiceVOIPCallQueueAddEditData] payload fields
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsCallQueueGetSingle, Integer, Hash)>] ServiceDocsCallQueueGetSingle data, response status code and response headers
    def v1_account_account_id_callqueue_post_with_http_info(account_id, req_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallQueueManagementApi.v1_account_account_id_callqueue_post ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling CallQueueManagementApi.v1_account_account_id_callqueue_post"
      end
      # verify the required parameter 'req_body' is set
      if @api_client.config.client_side_validation && req_body.nil?
        fail ArgumentError, "Missing the required parameter 'req_body' when calling CallQueueManagementApi.v1_account_account_id_callqueue_post"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/callqueue'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(req_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsCallQueueGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"CallQueueManagementApi.v1_account_account_id_callqueue_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallQueueManagementApi#v1_account_account_id_callqueue_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Call Queue
    # Remove the call queue from an account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param queue_id [String] Queue ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsCallQueueGetSingle]
    def v1_account_account_id_callqueue_queue_id_delete(account_id, queue_id, opts = {})
      data, _status_code, _headers = v1_account_account_id_callqueue_queue_id_delete_with_http_info(account_id, queue_id, opts)
      data
    end

    # Delete Call Queue
    # Remove the call queue from an account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param queue_id [String] Queue ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsCallQueueGetSingle, Integer, Hash)>] ServiceDocsCallQueueGetSingle data, response status code and response headers
    def v1_account_account_id_callqueue_queue_id_delete_with_http_info(account_id, queue_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallQueueManagementApi.v1_account_account_id_callqueue_queue_id_delete ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling CallQueueManagementApi.v1_account_account_id_callqueue_queue_id_delete"
      end
      # verify the required parameter 'queue_id' is set
      if @api_client.config.client_side_validation && queue_id.nil?
        fail ArgumentError, "Missing the required parameter 'queue_id' when calling CallQueueManagementApi.v1_account_account_id_callqueue_queue_id_delete"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/callqueue/{queueID}'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s)).sub('{' + 'queueID' + '}', CGI.escape(queue_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsCallQueueGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"CallQueueManagementApi.v1_account_account_id_callqueue_queue_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallQueueManagementApi#v1_account_account_id_callqueue_queue_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Call Queue Details
    # Capture metadata about a specific queue, such as queue_type and agent_wrapup_time.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param queue_id [String] Queue ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsCallQueueGetSingle]
    def v1_account_account_id_callqueue_queue_id_get(account_id, queue_id, opts = {})
      data, _status_code, _headers = v1_account_account_id_callqueue_queue_id_get_with_http_info(account_id, queue_id, opts)
      data
    end

    # Get Call Queue Details
    # Capture metadata about a specific queue, such as queue_type and agent_wrapup_time.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param queue_id [String] Queue ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsCallQueueGetSingle, Integer, Hash)>] ServiceDocsCallQueueGetSingle data, response status code and response headers
    def v1_account_account_id_callqueue_queue_id_get_with_http_info(account_id, queue_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallQueueManagementApi.v1_account_account_id_callqueue_queue_id_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling CallQueueManagementApi.v1_account_account_id_callqueue_queue_id_get"
      end
      # verify the required parameter 'queue_id' is set
      if @api_client.config.client_side_validation && queue_id.nil?
        fail ArgumentError, "Missing the required parameter 'queue_id' when calling CallQueueManagementApi.v1_account_account_id_callqueue_queue_id_get"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/callqueue/{queueID}'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s)).sub('{' + 'queueID' + '}', CGI.escape(queue_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsCallQueueGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"CallQueueManagementApi.v1_account_account_id_callqueue_queue_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallQueueManagementApi#v1_account_account_id_callqueue_queue_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Call Queue
    # Update the metadata mentioned above.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param queue_id [String] Queue ID, 32 alpha numeric
    # @param req_body [ServiceVOIPCallQueueAddEditData] payload fields
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsCallQueueGetSingle]
    def v1_account_account_id_callqueue_queue_id_put(account_id, queue_id, req_body, opts = {})
      data, _status_code, _headers = v1_account_account_id_callqueue_queue_id_put_with_http_info(account_id, queue_id, req_body, opts)
      data
    end

    # Update Call Queue
    # Update the metadata mentioned above.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param queue_id [String] Queue ID, 32 alpha numeric
    # @param req_body [ServiceVOIPCallQueueAddEditData] payload fields
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsCallQueueGetSingle, Integer, Hash)>] ServiceDocsCallQueueGetSingle data, response status code and response headers
    def v1_account_account_id_callqueue_queue_id_put_with_http_info(account_id, queue_id, req_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallQueueManagementApi.v1_account_account_id_callqueue_queue_id_put ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling CallQueueManagementApi.v1_account_account_id_callqueue_queue_id_put"
      end
      # verify the required parameter 'queue_id' is set
      if @api_client.config.client_side_validation && queue_id.nil?
        fail ArgumentError, "Missing the required parameter 'queue_id' when calling CallQueueManagementApi.v1_account_account_id_callqueue_queue_id_put"
      end
      # verify the required parameter 'req_body' is set
      if @api_client.config.client_side_validation && req_body.nil?
        fail ArgumentError, "Missing the required parameter 'req_body' when calling CallQueueManagementApi.v1_account_account_id_callqueue_queue_id_put"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/callqueue/{queueID}'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s)).sub('{' + 'queueID' + '}', CGI.escape(queue_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(req_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsCallQueueGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"CallQueueManagementApi.v1_account_account_id_callqueue_queue_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallQueueManagementApi#v1_account_account_id_callqueue_queue_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Call Queue Status
    # Access the status of a call queue in an account, such as the number of available agents (recipients), estimated wait time, and number of active sessions.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param queue_id [String] Queue ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsCallQueueGetSingleStatus]
    def v1_account_account_id_callqueue_queue_id_status_get(account_id, queue_id, opts = {})
      data, _status_code, _headers = v1_account_account_id_callqueue_queue_id_status_get_with_http_info(account_id, queue_id, opts)
      data
    end

    # Get Call Queue Status
    # Access the status of a call queue in an account, such as the number of available agents (recipients), estimated wait time, and number of active sessions.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param queue_id [String] Queue ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsCallQueueGetSingleStatus, Integer, Hash)>] ServiceDocsCallQueueGetSingleStatus data, response status code and response headers
    def v1_account_account_id_callqueue_queue_id_status_get_with_http_info(account_id, queue_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallQueueManagementApi.v1_account_account_id_callqueue_queue_id_status_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling CallQueueManagementApi.v1_account_account_id_callqueue_queue_id_status_get"
      end
      # verify the required parameter 'queue_id' is set
      if @api_client.config.client_side_validation && queue_id.nil?
        fail ArgumentError, "Missing the required parameter 'queue_id' when calling CallQueueManagementApi.v1_account_account_id_callqueue_queue_id_status_get"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/callqueue/{queueID}/status'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s)).sub('{' + 'queueID' + '}', CGI.escape(queue_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsCallQueueGetSingleStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"CallQueueManagementApi.v1_account_account_id_callqueue_queue_id_status_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallQueueManagementApi#v1_account_account_id_callqueue_queue_id_status_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Queue Roles of Account
    # Obtain data about each queue role in an account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsCallQueueGetRoles]
    def v1_account_account_id_queueroles_get(account_id, opts = {})
      data, _status_code, _headers = v1_account_account_id_queueroles_get_with_http_info(account_id, opts)
      data
    end

    # Get Queue Roles of Account
    # Obtain data about each queue role in an account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsCallQueueGetRoles, Integer, Hash)>] ServiceDocsCallQueueGetRoles data, response status code and response headers
    def v1_account_account_id_queueroles_get_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallQueueManagementApi.v1_account_account_id_queueroles_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling CallQueueManagementApi.v1_account_account_id_queueroles_get"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/queueroles'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsCallQueueGetRoles'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"CallQueueManagementApi.v1_account_account_id_queueroles_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallQueueManagementApi#v1_account_account_id_queueroles_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Assign Queue Role to Call Queue
    # Assign roles to members in a call queue.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param queue_id [String] Queue ID, 32 alpha numeric
    # @param req_body [ServiceVOIPCallQueueRoleAssignData] payload fields
    # @param [Hash] opts the optional parameters
    # @return [ServiceAPIResponse]
    def v1_account_account_id_queueroles_queue_id_post(account_id, queue_id, req_body, opts = {})
      data, _status_code, _headers = v1_account_account_id_queueroles_queue_id_post_with_http_info(account_id, queue_id, req_body, opts)
      data
    end

    # Assign Queue Role to Call Queue
    # Assign roles to members in a call queue.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param queue_id [String] Queue ID, 32 alpha numeric
    # @param req_body [ServiceVOIPCallQueueRoleAssignData] payload fields
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceAPIResponse, Integer, Hash)>] ServiceAPIResponse data, response status code and response headers
    def v1_account_account_id_queueroles_queue_id_post_with_http_info(account_id, queue_id, req_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallQueueManagementApi.v1_account_account_id_queueroles_queue_id_post ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling CallQueueManagementApi.v1_account_account_id_queueroles_queue_id_post"
      end
      # verify the required parameter 'queue_id' is set
      if @api_client.config.client_side_validation && queue_id.nil?
        fail ArgumentError, "Missing the required parameter 'queue_id' when calling CallQueueManagementApi.v1_account_account_id_queueroles_queue_id_post"
      end
      # verify the required parameter 'req_body' is set
      if @api_client.config.client_side_validation && req_body.nil?
        fail ArgumentError, "Missing the required parameter 'req_body' when calling CallQueueManagementApi.v1_account_account_id_queueroles_queue_id_post"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/queueroles/{queueID}'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s)).sub('{' + 'queueID' + '}', CGI.escape(queue_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(req_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceAPIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"CallQueueManagementApi.v1_account_account_id_queueroles_queue_id_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallQueueManagementApi#v1_account_account_id_queueroles_queue_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
