=begin
#White Label Communications CPaas API Documentation

#A CPaaS platform API

The version of the OpenAPI document: 1.1
Contact: support@whitelabelcomm.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class CPaaSManagementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get All CPaaS Users
    # Retrieve a list of all CPaaS users in an account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size number of records to return, range 1 to 100
    # @option opts [String] :start_key unique to fetch next records
    # @option opts [String] :sort sorting the records by email(default)/role/first_name/last_name, _A is for ascending and _D is for descending, eg: sort&#x3D;role_A,email_D
    # @option opts [String] :email Email
    # @option opts [String] :role User Role
    # @option opts [String] :first_name First Name
    # @option opts [String] :last_name Last Name
    # @return [ServiceDocsAdminUserGetAll]
    def v1_mgmt_user_get(opts = {})
      data, _status_code, _headers = v1_mgmt_user_get_with_http_info(opts)
      data
    end

    # Get All CPaaS Users
    # Retrieve a list of all CPaaS users in an account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size number of records to return, range 1 to 100
    # @option opts [String] :start_key unique to fetch next records
    # @option opts [String] :sort sorting the records by email(default)/role/first_name/last_name, _A is for ascending and _D is for descending, eg: sort&#x3D;role_A,email_D
    # @option opts [String] :email Email
    # @option opts [String] :role User Role
    # @option opts [String] :first_name First Name
    # @option opts [String] :last_name Last Name
    # @return [Array<(ServiceDocsAdminUserGetAll, Integer, Hash)>] ServiceDocsAdminUserGetAll data, response status code and response headers
    def v1_mgmt_user_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CPaaSManagementApi.v1_mgmt_user_get ...'
      end
      # resource path
      local_var_path = '/v1/mgmt/user'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'start_key'] = opts[:'start_key'] if !opts[:'start_key'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'first_name'] = opts[:'first_name'] if !opts[:'first_name'].nil?
      query_params[:'last_name'] = opts[:'last_name'] if !opts[:'last_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsAdminUserGetAll'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"CPaaSManagementApi.v1_mgmt_user_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CPaaSManagementApi#v1_mgmt_user_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Invite CPaaS User
    # Link a new CPaaS user to an existing client account.
    # @param req_body [ServiceAdminUserAddData] payload fields
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsAdminUserGetSingle]
    def v1_mgmt_user_post(req_body, opts = {})
      data, _status_code, _headers = v1_mgmt_user_post_with_http_info(req_body, opts)
      data
    end

    # Invite CPaaS User
    # Link a new CPaaS user to an existing client account.
    # @param req_body [ServiceAdminUserAddData] payload fields
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsAdminUserGetSingle, Integer, Hash)>] ServiceDocsAdminUserGetSingle data, response status code and response headers
    def v1_mgmt_user_post_with_http_info(req_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CPaaSManagementApi.v1_mgmt_user_post ...'
      end
      # verify the required parameter 'req_body' is set
      if @api_client.config.client_side_validation && req_body.nil?
        fail ArgumentError, "Missing the required parameter 'req_body' when calling CPaaSManagementApi.v1_mgmt_user_post"
      end
      # resource path
      local_var_path = '/v1/mgmt/user'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(req_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsAdminUserGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"CPaaSManagementApi.v1_mgmt_user_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CPaaSManagementApi#v1_mgmt_user_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete CPaaS User
    # Delete a CPaaS user from the associated account.
    # @param user_id [String] User ID, numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsAdminUserDelete]
    def v1_mgmt_user_user_id_delete(user_id, opts = {})
      data, _status_code, _headers = v1_mgmt_user_user_id_delete_with_http_info(user_id, opts)
      data
    end

    # Delete CPaaS User
    # Delete a CPaaS user from the associated account.
    # @param user_id [String] User ID, numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsAdminUserDelete, Integer, Hash)>] ServiceDocsAdminUserDelete data, response status code and response headers
    def v1_mgmt_user_user_id_delete_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CPaaSManagementApi.v1_mgmt_user_user_id_delete ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling CPaaSManagementApi.v1_mgmt_user_user_id_delete"
      end
      # resource path
      local_var_path = '/v1/mgmt/user/{userID}'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsAdminUserDelete'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"CPaaSManagementApi.v1_mgmt_user_user_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CPaaSManagementApi#v1_mgmt_user_user_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CPaaS User Details
    # View details about each CPaaS user in an account.
    # @param user_id [String] User ID, numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsAdminUserGetSingle]
    def v1_mgmt_user_user_id_get(user_id, opts = {})
      data, _status_code, _headers = v1_mgmt_user_user_id_get_with_http_info(user_id, opts)
      data
    end

    # Get CPaaS User Details
    # View details about each CPaaS user in an account.
    # @param user_id [String] User ID, numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsAdminUserGetSingle, Integer, Hash)>] ServiceDocsAdminUserGetSingle data, response status code and response headers
    def v1_mgmt_user_user_id_get_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CPaaSManagementApi.v1_mgmt_user_user_id_get ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling CPaaSManagementApi.v1_mgmt_user_user_id_get"
      end
      # resource path
      local_var_path = '/v1/mgmt/user/{userID}'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsAdminUserGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"CPaaSManagementApi.v1_mgmt_user_user_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CPaaSManagementApi#v1_mgmt_user_user_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update CPaaS User Role
    # Update a CPaaS user's role within a client's account.
    # @param user_id [String] User ID, numeric
    # @param req_body [ServiceAdminUserEditData] payload fields
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsAdminUserGetSingle]
    def v1_mgmt_user_user_id_put(user_id, req_body, opts = {})
      data, _status_code, _headers = v1_mgmt_user_user_id_put_with_http_info(user_id, req_body, opts)
      data
    end

    # Update CPaaS User Role
    # Update a CPaaS user&#39;s role within a client&#39;s account.
    # @param user_id [String] User ID, numeric
    # @param req_body [ServiceAdminUserEditData] payload fields
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsAdminUserGetSingle, Integer, Hash)>] ServiceDocsAdminUserGetSingle data, response status code and response headers
    def v1_mgmt_user_user_id_put_with_http_info(user_id, req_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CPaaSManagementApi.v1_mgmt_user_user_id_put ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling CPaaSManagementApi.v1_mgmt_user_user_id_put"
      end
      # verify the required parameter 'req_body' is set
      if @api_client.config.client_side_validation && req_body.nil?
        fail ArgumentError, "Missing the required parameter 'req_body' when calling CPaaSManagementApi.v1_mgmt_user_user_id_put"
      end
      # resource path
      local_var_path = '/v1/mgmt/user/{userID}'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(req_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsAdminUserGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"CPaaSManagementApi.v1_mgmt_user_user_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CPaaSManagementApi#v1_mgmt_user_user_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
