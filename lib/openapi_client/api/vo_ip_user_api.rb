=begin
#White Label Communications CPaas API Documentation

#A CPaaS platform API

The version of the OpenAPI document: 1.1
Contact: support@whitelabelcomm.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class VoIPUserApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get User List
    # Get a list of all VoIP users that includes first and last names, email addresses, extensions, and account statuses.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_key start_key for pagination that was returned as next_start_key from your previous call
    # @option opts [Integer] :page_size number of records to return, range 1 to 50
    # @return [ServiceDocsUserGetAll]
    def v1_account_accountid_user_get(accountid, opts = {})
      data, _status_code, _headers = v1_account_accountid_user_get_with_http_info(accountid, opts)
      data
    end

    # Get User List
    # Get a list of all VoIP users that includes first and last names, email addresses, extensions, and account statuses.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_key start_key for pagination that was returned as next_start_key from your previous call
    # @option opts [Integer] :page_size number of records to return, range 1 to 50
    # @return [Array<(ServiceDocsUserGetAll, Integer, Hash)>] ServiceDocsUserGetAll data, response status code and response headers
    def v1_account_accountid_user_get_with_http_info(accountid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VoIPUserApi.v1_account_accountid_user_get ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling VoIPUserApi.v1_account_accountid_user_get"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}/user'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_key'] = opts[:'start_key'] if !opts[:'start_key'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsUserGetAll'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"VoIPUserApi.v1_account_accountid_user_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VoIPUserApi#v1_account_accountid_user_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create User
    # Add new users to the account. When a user is added, the system generates their unique 32 alpha numeric ID.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param user [ServiceVOIPUserAdd2] user fields
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsUserGetSingle]
    def v1_account_accountid_user_post(accountid, user, opts = {})
      data, _status_code, _headers = v1_account_accountid_user_post_with_http_info(accountid, user, opts)
      data
    end

    # Create User
    # Add new users to the account. When a user is added, the system generates their unique 32 alpha numeric ID.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param user [ServiceVOIPUserAdd2] user fields
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsUserGetSingle, Integer, Hash)>] ServiceDocsUserGetSingle data, response status code and response headers
    def v1_account_accountid_user_post_with_http_info(accountid, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VoIPUserApi.v1_account_accountid_user_post ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling VoIPUserApi.v1_account_accountid_user_post"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling VoIPUserApi.v1_account_accountid_user_post"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}/user'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsUserGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"VoIPUserApi.v1_account_accountid_user_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VoIPUserApi#v1_account_accountid_user_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete User
    # Delete VoIP user access to maintain the security of your accounts.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param userid [String] User ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsUserGetSingle]
    def v1_account_accountid_user_userid_delete(accountid, userid, opts = {})
      data, _status_code, _headers = v1_account_accountid_user_userid_delete_with_http_info(accountid, userid, opts)
      data
    end

    # Delete User
    # Delete VoIP user access to maintain the security of your accounts.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param userid [String] User ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsUserGetSingle, Integer, Hash)>] ServiceDocsUserGetSingle data, response status code and response headers
    def v1_account_accountid_user_userid_delete_with_http_info(accountid, userid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VoIPUserApi.v1_account_accountid_user_userid_delete ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling VoIPUserApi.v1_account_accountid_user_userid_delete"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling VoIPUserApi.v1_account_accountid_user_userid_delete"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}/user/{userid}'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s)).sub('{' + 'userid' + '}', CGI.escape(userid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsUserGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"VoIPUserApi.v1_account_accountid_user_userid_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VoIPUserApi#v1_account_accountid_user_userid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get User Details
    # View specific user details.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param userid [String] User ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsUserGetSingle]
    def v1_account_accountid_user_userid_get(accountid, userid, opts = {})
      data, _status_code, _headers = v1_account_accountid_user_userid_get_with_http_info(accountid, userid, opts)
      data
    end

    # Get User Details
    # View specific user details.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param userid [String] User ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsUserGetSingle, Integer, Hash)>] ServiceDocsUserGetSingle data, response status code and response headers
    def v1_account_accountid_user_userid_get_with_http_info(accountid, userid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VoIPUserApi.v1_account_accountid_user_userid_get ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling VoIPUserApi.v1_account_accountid_user_userid_get"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling VoIPUserApi.v1_account_accountid_user_userid_get"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}/user/{userid}'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s)).sub('{' + 'userid' + '}', CGI.escape(userid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsUserGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"VoIPUserApi.v1_account_accountid_user_userid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VoIPUserApi#v1_account_accountid_user_userid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update User
    # Keep user information current. Modify the first and last name, extension, and other pertinent information.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param userid [String] User ID, 32 alpha numeric
    # @param user [ServiceVOIPUserAdd2] user fields
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsUserGetSingle]
    def v1_account_accountid_user_userid_put(accountid, userid, user, opts = {})
      data, _status_code, _headers = v1_account_accountid_user_userid_put_with_http_info(accountid, userid, user, opts)
      data
    end

    # Update User
    # Keep user information current. Modify the first and last name, extension, and other pertinent information.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param userid [String] User ID, 32 alpha numeric
    # @param user [ServiceVOIPUserAdd2] user fields
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsUserGetSingle, Integer, Hash)>] ServiceDocsUserGetSingle data, response status code and response headers
    def v1_account_accountid_user_userid_put_with_http_info(accountid, userid, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VoIPUserApi.v1_account_accountid_user_userid_put ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling VoIPUserApi.v1_account_accountid_user_userid_put"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling VoIPUserApi.v1_account_accountid_user_userid_put"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling VoIPUserApi.v1_account_accountid_user_userid_put"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}/user/{userid}'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s)).sub('{' + 'userid' + '}', CGI.escape(userid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsUserGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"VoIPUserApi.v1_account_accountid_user_userid_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VoIPUserApi#v1_account_accountid_user_userid_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Impersonate a User
    # Impersonate as another user if you have access to admin.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param userid [String] User ID, 32 alpha numeric
    # @param user [ServiceVOIPImpersonateUser] Payload for impersonate a user
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsImpersonateUserGetSingle]
    def v1_account_accountid_user_userid_userauth_post(accountid, userid, user, opts = {})
      data, _status_code, _headers = v1_account_accountid_user_userid_userauth_post_with_http_info(accountid, userid, user, opts)
      data
    end

    # Impersonate a User
    # Impersonate as another user if you have access to admin.
    # @param accountid [String] Account ID, 32 alpha numeric
    # @param userid [String] User ID, 32 alpha numeric
    # @param user [ServiceVOIPImpersonateUser] Payload for impersonate a user
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsImpersonateUserGetSingle, Integer, Hash)>] ServiceDocsImpersonateUserGetSingle data, response status code and response headers
    def v1_account_accountid_user_userid_userauth_post_with_http_info(accountid, userid, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VoIPUserApi.v1_account_accountid_user_userid_userauth_post ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling VoIPUserApi.v1_account_accountid_user_userid_userauth_post"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling VoIPUserApi.v1_account_accountid_user_userid_userauth_post"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling VoIPUserApi.v1_account_accountid_user_userid_userauth_post"
      end
      # resource path
      local_var_path = '/v1/account/{accountid}/user/{userid}/userauth'.sub('{' + 'accountid' + '}', CGI.escape(accountid.to_s)).sub('{' + 'userid' + '}', CGI.escape(userid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsImpersonateUserGetSingle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"VoIPUserApi.v1_account_accountid_user_userid_userauth_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VoIPUserApi#v1_account_accountid_user_userid_userauth_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
