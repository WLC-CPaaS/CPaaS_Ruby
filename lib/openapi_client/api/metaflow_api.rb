=begin
#White Label Communications CPaas API Documentation

#A CPaaS platform API

The version of the OpenAPI document: 1.1
Contact: support@whitelabelcomm.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class MetaflowApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete Device Metaflow
    # Delete all metaflows associated with a device.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param device_id [String] Device ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsMetaflowGet]
    def v1_account_account_id_device_device_id_metaflow_delete(account_id, device_id, opts = {})
      data, _status_code, _headers = v1_account_account_id_device_device_id_metaflow_delete_with_http_info(account_id, device_id, opts)
      data
    end

    # Delete Device Metaflow
    # Delete all metaflows associated with a device.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param device_id [String] Device ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsMetaflowGet, Integer, Hash)>] ServiceDocsMetaflowGet data, response status code and response headers
    def v1_account_account_id_device_device_id_metaflow_delete_with_http_info(account_id, device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetaflowApi.v1_account_account_id_device_device_id_metaflow_delete ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling MetaflowApi.v1_account_account_id_device_device_id_metaflow_delete"
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling MetaflowApi.v1_account_account_id_device_device_id_metaflow_delete"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/device/{deviceID}/metaflow'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s)).sub('{' + 'deviceID' + '}', CGI.escape(device_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsMetaflowGet'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"MetaflowApi.v1_account_account_id_device_device_id_metaflow_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetaflowApi#v1_account_account_id_device_device_id_metaflow_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Device Metaflow List
    # Get the list of metaflows for a device.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param device_id [String] Device ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsMetaflowGet]
    def v1_account_account_id_device_device_id_metaflow_get(account_id, device_id, opts = {})
      data, _status_code, _headers = v1_account_account_id_device_device_id_metaflow_get_with_http_info(account_id, device_id, opts)
      data
    end

    # Get Device Metaflow List
    # Get the list of metaflows for a device.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param device_id [String] Device ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsMetaflowGet, Integer, Hash)>] ServiceDocsMetaflowGet data, response status code and response headers
    def v1_account_account_id_device_device_id_metaflow_get_with_http_info(account_id, device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetaflowApi.v1_account_account_id_device_device_id_metaflow_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling MetaflowApi.v1_account_account_id_device_device_id_metaflow_get"
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling MetaflowApi.v1_account_account_id_device_device_id_metaflow_get"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/device/{deviceID}/metaflow'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s)).sub('{' + 'deviceID' + '}', CGI.escape(device_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsMetaflowGet'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"MetaflowApi.v1_account_account_id_device_device_id_metaflow_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetaflowApi#v1_account_account_id_device_device_id_metaflow_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Device Metaflow
    # Create a metaflow or multiple metaflows for a device.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param device_id [String] Device ID, 32 alpha numeric
    # @param req_body [ServiceVOIPMetaflowAddData] payload fields
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsMetaflowGet]
    def v1_account_account_id_device_device_id_metaflow_post(account_id, device_id, req_body, opts = {})
      data, _status_code, _headers = v1_account_account_id_device_device_id_metaflow_post_with_http_info(account_id, device_id, req_body, opts)
      data
    end

    # Create Device Metaflow
    # Create a metaflow or multiple metaflows for a device.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param device_id [String] Device ID, 32 alpha numeric
    # @param req_body [ServiceVOIPMetaflowAddData] payload fields
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsMetaflowGet, Integer, Hash)>] ServiceDocsMetaflowGet data, response status code and response headers
    def v1_account_account_id_device_device_id_metaflow_post_with_http_info(account_id, device_id, req_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetaflowApi.v1_account_account_id_device_device_id_metaflow_post ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling MetaflowApi.v1_account_account_id_device_device_id_metaflow_post"
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling MetaflowApi.v1_account_account_id_device_device_id_metaflow_post"
      end
      # verify the required parameter 'req_body' is set
      if @api_client.config.client_side_validation && req_body.nil?
        fail ArgumentError, "Missing the required parameter 'req_body' when calling MetaflowApi.v1_account_account_id_device_device_id_metaflow_post"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/device/{deviceID}/metaflow'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s)).sub('{' + 'deviceID' + '}', CGI.escape(device_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(req_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsMetaflowGet'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"MetaflowApi.v1_account_account_id_device_device_id_metaflow_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetaflowApi#v1_account_account_id_device_device_id_metaflow_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Account Metaflow
    # Remove all metaflows from an account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsMetaflowGet]
    def v1_account_account_id_metaflow_delete(account_id, opts = {})
      data, _status_code, _headers = v1_account_account_id_metaflow_delete_with_http_info(account_id, opts)
      data
    end

    # Delete Account Metaflow
    # Remove all metaflows from an account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsMetaflowGet, Integer, Hash)>] ServiceDocsMetaflowGet data, response status code and response headers
    def v1_account_account_id_metaflow_delete_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetaflowApi.v1_account_account_id_metaflow_delete ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling MetaflowApi.v1_account_account_id_metaflow_delete"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/metaflow'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsMetaflowGet'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"MetaflowApi.v1_account_account_id_metaflow_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetaflowApi#v1_account_account_id_metaflow_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Account Metaflow List
    # Get an account's metaflow list.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsMetaflowGet]
    def v1_account_account_id_metaflow_get(account_id, opts = {})
      data, _status_code, _headers = v1_account_account_id_metaflow_get_with_http_info(account_id, opts)
      data
    end

    # Get Account Metaflow List
    # Get an account&#39;s metaflow list.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsMetaflowGet, Integer, Hash)>] ServiceDocsMetaflowGet data, response status code and response headers
    def v1_account_account_id_metaflow_get_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetaflowApi.v1_account_account_id_metaflow_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling MetaflowApi.v1_account_account_id_metaflow_get"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/metaflow'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsMetaflowGet'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"MetaflowApi.v1_account_account_id_metaflow_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetaflowApi#v1_account_account_id_metaflow_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Account Metaflow
    # Generate a metaflow for an account.
    # @param account_id [String] Account ID
    # @param metaflow [ServiceVOIPMetaflowAddData] Metaflow fields
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsMetaflowGet]
    def v1_account_account_id_metaflow_post(account_id, metaflow, opts = {})
      data, _status_code, _headers = v1_account_account_id_metaflow_post_with_http_info(account_id, metaflow, opts)
      data
    end

    # Create Account Metaflow
    # Generate a metaflow for an account.
    # @param account_id [String] Account ID
    # @param metaflow [ServiceVOIPMetaflowAddData] Metaflow fields
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsMetaflowGet, Integer, Hash)>] ServiceDocsMetaflowGet data, response status code and response headers
    def v1_account_account_id_metaflow_post_with_http_info(account_id, metaflow, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetaflowApi.v1_account_account_id_metaflow_post ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling MetaflowApi.v1_account_account_id_metaflow_post"
      end
      # verify the required parameter 'metaflow' is set
      if @api_client.config.client_side_validation && metaflow.nil?
        fail ArgumentError, "Missing the required parameter 'metaflow' when calling MetaflowApi.v1_account_account_id_metaflow_post"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/metaflow'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(metaflow)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsMetaflowGet'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"MetaflowApi.v1_account_account_id_metaflow_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetaflowApi#v1_account_account_id_metaflow_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete User Metaflow
    # Delete all metaflows associated with a user.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param user_id [String] user ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsMetaflowGet]
    def v1_account_account_id_user_user_id_metaflow_delete(account_id, user_id, opts = {})
      data, _status_code, _headers = v1_account_account_id_user_user_id_metaflow_delete_with_http_info(account_id, user_id, opts)
      data
    end

    # Delete User Metaflow
    # Delete all metaflows associated with a user.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param user_id [String] user ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsMetaflowGet, Integer, Hash)>] ServiceDocsMetaflowGet data, response status code and response headers
    def v1_account_account_id_user_user_id_metaflow_delete_with_http_info(account_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetaflowApi.v1_account_account_id_user_user_id_metaflow_delete ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling MetaflowApi.v1_account_account_id_user_user_id_metaflow_delete"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling MetaflowApi.v1_account_account_id_user_user_id_metaflow_delete"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/user/{userID}/metaflow'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s)).sub('{' + 'userID' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsMetaflowGet'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"MetaflowApi.v1_account_account_id_user_user_id_metaflow_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetaflowApi#v1_account_account_id_user_user_id_metaflow_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get User Metaflow List
    # Get the list of metaflows for a user.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param user_id [String] user ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsMetaflowGet]
    def v1_account_account_id_user_user_id_metaflow_get(account_id, user_id, opts = {})
      data, _status_code, _headers = v1_account_account_id_user_user_id_metaflow_get_with_http_info(account_id, user_id, opts)
      data
    end

    # Get User Metaflow List
    # Get the list of metaflows for a user.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param user_id [String] user ID, 32 alpha numeric
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsMetaflowGet, Integer, Hash)>] ServiceDocsMetaflowGet data, response status code and response headers
    def v1_account_account_id_user_user_id_metaflow_get_with_http_info(account_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetaflowApi.v1_account_account_id_user_user_id_metaflow_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling MetaflowApi.v1_account_account_id_user_user_id_metaflow_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling MetaflowApi.v1_account_account_id_user_user_id_metaflow_get"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/user/{userID}/metaflow'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s)).sub('{' + 'userID' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsMetaflowGet'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"MetaflowApi.v1_account_account_id_user_user_id_metaflow_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetaflowApi#v1_account_account_id_user_user_id_metaflow_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create User Metaflow
    # Add a metaflow or multiple metaflows for a user in an account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param user_id [String] user ID, 32 alpha numeric
    # @param req_body [ServiceVOIPMetaflowAddData] payload fields
    # @param [Hash] opts the optional parameters
    # @return [ServiceDocsMetaflowGet]
    def v1_account_account_id_user_user_id_metaflow_post(account_id, user_id, req_body, opts = {})
      data, _status_code, _headers = v1_account_account_id_user_user_id_metaflow_post_with_http_info(account_id, user_id, req_body, opts)
      data
    end

    # Create User Metaflow
    # Add a metaflow or multiple metaflows for a user in an account.
    # @param account_id [String] Account ID, 32 alpha numeric
    # @param user_id [String] user ID, 32 alpha numeric
    # @param req_body [ServiceVOIPMetaflowAddData] payload fields
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceDocsMetaflowGet, Integer, Hash)>] ServiceDocsMetaflowGet data, response status code and response headers
    def v1_account_account_id_user_user_id_metaflow_post_with_http_info(account_id, user_id, req_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetaflowApi.v1_account_account_id_user_user_id_metaflow_post ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling MetaflowApi.v1_account_account_id_user_user_id_metaflow_post"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling MetaflowApi.v1_account_account_id_user_user_id_metaflow_post"
      end
      # verify the required parameter 'req_body' is set
      if @api_client.config.client_side_validation && req_body.nil?
        fail ArgumentError, "Missing the required parameter 'req_body' when calling MetaflowApi.v1_account_account_id_user_user_id_metaflow_post"
      end
      # resource path
      local_var_path = '/v1/account/{accountID}/user/{userID}/metaflow'.sub('{' + 'accountID' + '}', CGI.escape(account_id.to_s)).sub('{' + 'userID' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(req_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDocsMetaflowGet'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"MetaflowApi.v1_account_account_id_user_user_id_metaflow_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetaflowApi#v1_account_account_id_user_user_id_metaflow_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
