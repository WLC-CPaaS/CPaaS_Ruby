=begin
#White Label Communications CPaas API Documentation

#A CPaaS platform API

The version of the OpenAPI document: 1.1
Contact: support@whitelabelcomm.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0-SNAPSHOT

=end

require 'date'
require 'time'

module OpenapiClient
  class ServiceCdrOutputShort
    attr_accessor :authorizing_id

    attr_accessor :billing_seconds

    attr_accessor :bridge_id

    attr_accessor :call_id

    attr_accessor :call_priority

    attr_accessor :call_type

    attr_accessor :callee_id_name

    attr_accessor :callee_id_number

    attr_accessor :caller_id_name

    attr_accessor :caller_id_number

    attr_accessor :calling_from

    attr_accessor :cost

    attr_accessor :dialed_number

    attr_accessor :direction

    attr_accessor :duration_seconds

    attr_accessor :from

    attr_accessor :hangup_cause

    attr_accessor :id

    attr_accessor :interaction_id

    attr_accessor :media_recordings

    attr_accessor :media_server

    attr_accessor :other_leg_call_id

    attr_accessor :owner_id

    attr_accessor :rate

    attr_accessor :rate_name

    attr_accessor :recording_url

    attr_accessor :request

    attr_accessor :timestamp

    attr_accessor :timestamp_datetime

    attr_accessor :to

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'authorizing_id' => :'authorizing_id',
        :'billing_seconds' => :'billing_seconds',
        :'bridge_id' => :'bridge_id',
        :'call_id' => :'call_id',
        :'call_priority' => :'call_priority',
        :'call_type' => :'call_type',
        :'callee_id_name' => :'callee_id_name',
        :'callee_id_number' => :'callee_id_number',
        :'caller_id_name' => :'caller_id_name',
        :'caller_id_number' => :'caller_id_number',
        :'calling_from' => :'calling_from',
        :'cost' => :'cost',
        :'dialed_number' => :'dialed_number',
        :'direction' => :'direction',
        :'duration_seconds' => :'duration_seconds',
        :'from' => :'from',
        :'hangup_cause' => :'hangup_cause',
        :'id' => :'id',
        :'interaction_id' => :'interaction_id',
        :'media_recordings' => :'media_recordings',
        :'media_server' => :'media_server',
        :'other_leg_call_id' => :'other_leg_call_id',
        :'owner_id' => :'owner_id',
        :'rate' => :'rate',
        :'rate_name' => :'rate_name',
        :'recording_url' => :'recording_url',
        :'request' => :'request',
        :'timestamp' => :'timestamp',
        :'timestamp_datetime' => :'timestamp_datetime',
        :'to' => :'to'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'authorizing_id' => :'String',
        :'billing_seconds' => :'Integer',
        :'bridge_id' => :'String',
        :'call_id' => :'String',
        :'call_priority' => :'String',
        :'call_type' => :'String',
        :'callee_id_name' => :'String',
        :'callee_id_number' => :'String',
        :'caller_id_name' => :'String',
        :'caller_id_number' => :'String',
        :'calling_from' => :'String',
        :'cost' => :'String',
        :'dialed_number' => :'String',
        :'direction' => :'String',
        :'duration_seconds' => :'Integer',
        :'from' => :'String',
        :'hangup_cause' => :'String',
        :'id' => :'String',
        :'interaction_id' => :'String',
        :'media_recordings' => :'Array<Object>',
        :'media_server' => :'String',
        :'other_leg_call_id' => :'String',
        :'owner_id' => :'String',
        :'rate' => :'String',
        :'rate_name' => :'String',
        :'recording_url' => :'String',
        :'request' => :'String',
        :'timestamp' => :'Integer',
        :'timestamp_datetime' => :'String',
        :'to' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ServiceCdrOutputShort` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ServiceCdrOutputShort`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'authorizing_id')
        self.authorizing_id = attributes[:'authorizing_id']
      end

      if attributes.key?(:'billing_seconds')
        self.billing_seconds = attributes[:'billing_seconds']
      end

      if attributes.key?(:'bridge_id')
        self.bridge_id = attributes[:'bridge_id']
      end

      if attributes.key?(:'call_id')
        self.call_id = attributes[:'call_id']
      end

      if attributes.key?(:'call_priority')
        self.call_priority = attributes[:'call_priority']
      end

      if attributes.key?(:'call_type')
        self.call_type = attributes[:'call_type']
      end

      if attributes.key?(:'callee_id_name')
        self.callee_id_name = attributes[:'callee_id_name']
      end

      if attributes.key?(:'callee_id_number')
        self.callee_id_number = attributes[:'callee_id_number']
      end

      if attributes.key?(:'caller_id_name')
        self.caller_id_name = attributes[:'caller_id_name']
      end

      if attributes.key?(:'caller_id_number')
        self.caller_id_number = attributes[:'caller_id_number']
      end

      if attributes.key?(:'calling_from')
        self.calling_from = attributes[:'calling_from']
      end

      if attributes.key?(:'cost')
        self.cost = attributes[:'cost']
      end

      if attributes.key?(:'dialed_number')
        self.dialed_number = attributes[:'dialed_number']
      end

      if attributes.key?(:'direction')
        self.direction = attributes[:'direction']
      end

      if attributes.key?(:'duration_seconds')
        self.duration_seconds = attributes[:'duration_seconds']
      end

      if attributes.key?(:'from')
        self.from = attributes[:'from']
      end

      if attributes.key?(:'hangup_cause')
        self.hangup_cause = attributes[:'hangup_cause']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'interaction_id')
        self.interaction_id = attributes[:'interaction_id']
      end

      if attributes.key?(:'media_recordings')
        if (value = attributes[:'media_recordings']).is_a?(Array)
          self.media_recordings = value
        end
      end

      if attributes.key?(:'media_server')
        self.media_server = attributes[:'media_server']
      end

      if attributes.key?(:'other_leg_call_id')
        self.other_leg_call_id = attributes[:'other_leg_call_id']
      end

      if attributes.key?(:'owner_id')
        self.owner_id = attributes[:'owner_id']
      end

      if attributes.key?(:'rate')
        self.rate = attributes[:'rate']
      end

      if attributes.key?(:'rate_name')
        self.rate_name = attributes[:'rate_name']
      end

      if attributes.key?(:'recording_url')
        self.recording_url = attributes[:'recording_url']
      end

      if attributes.key?(:'request')
        self.request = attributes[:'request']
      end

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.key?(:'timestamp_datetime')
        self.timestamp_datetime = attributes[:'timestamp_datetime']
      end

      if attributes.key?(:'to')
        self.to = attributes[:'to']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          authorizing_id == o.authorizing_id &&
          billing_seconds == o.billing_seconds &&
          bridge_id == o.bridge_id &&
          call_id == o.call_id &&
          call_priority == o.call_priority &&
          call_type == o.call_type &&
          callee_id_name == o.callee_id_name &&
          callee_id_number == o.callee_id_number &&
          caller_id_name == o.caller_id_name &&
          caller_id_number == o.caller_id_number &&
          calling_from == o.calling_from &&
          cost == o.cost &&
          dialed_number == o.dialed_number &&
          direction == o.direction &&
          duration_seconds == o.duration_seconds &&
          from == o.from &&
          hangup_cause == o.hangup_cause &&
          id == o.id &&
          interaction_id == o.interaction_id &&
          media_recordings == o.media_recordings &&
          media_server == o.media_server &&
          other_leg_call_id == o.other_leg_call_id &&
          owner_id == o.owner_id &&
          rate == o.rate &&
          rate_name == o.rate_name &&
          recording_url == o.recording_url &&
          request == o.request &&
          timestamp == o.timestamp &&
          timestamp_datetime == o.timestamp_datetime &&
          to == o.to
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [authorizing_id, billing_seconds, bridge_id, call_id, call_priority, call_type, callee_id_name, callee_id_number, caller_id_name, caller_id_number, calling_from, cost, dialed_number, direction, duration_seconds, from, hangup_cause, id, interaction_id, media_recordings, media_server, other_leg_call_id, owner_id, rate, rate_name, recording_url, request, timestamp, timestamp_datetime, to].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
