=begin
#White Label Communications CPaas API Documentation

#A CPaaS platform API

The version of the OpenAPI document: 1.1
Contact: support@whitelabelcomm.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0-SNAPSHOT

=end

require 'date'
require 'time'

module OpenapiClient
  class ServiceVOIPTemporalRuleAddEdit2
    attr_accessor :cycle

    attr_accessor :days

    attr_accessor :enabled

    attr_accessor :interval

    attr_accessor :month

    attr_accessor :name

    attr_accessor :ordinal

    attr_accessor :start_date

    attr_accessor :start_date_req

    attr_accessor :time_window_start

    attr_accessor :time_window_start_req

    attr_accessor :time_window_stop

    attr_accessor :time_window_stop_req

    attr_accessor :wdays

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cycle' => :'cycle',
        :'days' => :'days',
        :'enabled' => :'enabled',
        :'interval' => :'interval',
        :'month' => :'month',
        :'name' => :'name',
        :'ordinal' => :'ordinal',
        :'start_date' => :'start_date',
        :'start_date_req' => :'start_date_req',
        :'time_window_start' => :'time_window_start',
        :'time_window_start_req' => :'time_window_start_req',
        :'time_window_stop' => :'time_window_stop',
        :'time_window_stop_req' => :'time_window_stop_req',
        :'wdays' => :'wdays'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'cycle' => :'String',
        :'days' => :'Array<Integer>',
        :'enabled' => :'Boolean',
        :'interval' => :'Integer',
        :'month' => :'Integer',
        :'name' => :'String',
        :'ordinal' => :'String',
        :'start_date' => :'Integer',
        :'start_date_req' => :'String',
        :'time_window_start' => :'Integer',
        :'time_window_start_req' => :'String',
        :'time_window_stop' => :'Integer',
        :'time_window_stop_req' => :'String',
        :'wdays' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ServiceVOIPTemporalRuleAddEdit2` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ServiceVOIPTemporalRuleAddEdit2`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'cycle')
        self.cycle = attributes[:'cycle']
      else
        self.cycle = nil
      end

      if attributes.key?(:'days')
        if (value = attributes[:'days']).is_a?(Array)
          self.days = value
        end
      end

      if attributes.key?(:'enabled')
        self.enabled = attributes[:'enabled']
      end

      if attributes.key?(:'interval')
        self.interval = attributes[:'interval']
      end

      if attributes.key?(:'month')
        self.month = attributes[:'month']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'ordinal')
        self.ordinal = attributes[:'ordinal']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'start_date_req')
        self.start_date_req = attributes[:'start_date_req']
      end

      if attributes.key?(:'time_window_start')
        self.time_window_start = attributes[:'time_window_start']
      end

      if attributes.key?(:'time_window_start_req')
        self.time_window_start_req = attributes[:'time_window_start_req']
      end

      if attributes.key?(:'time_window_stop')
        self.time_window_stop = attributes[:'time_window_stop']
      end

      if attributes.key?(:'time_window_stop_req')
        self.time_window_stop_req = attributes[:'time_window_stop_req']
      end

      if attributes.key?(:'wdays')
        if (value = attributes[:'wdays']).is_a?(Array)
          self.wdays = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @cycle.nil?
        invalid_properties.push('invalid value for "cycle", cycle cannot be nil.')
      end

      if !@interval.nil? && @interval < 1
        invalid_properties.push('invalid value for "interval", must be greater than or equal to 1.')
      end

      if !@month.nil? && @month > 12
        invalid_properties.push('invalid value for "month", must be smaller than or equal to 12.')
      end

      if !@month.nil? && @month < 1
        invalid_properties.push('invalid value for "month", must be greater than or equal to 1.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length > 128
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 128.')
      end

      if !@time_window_start.nil? && @time_window_start > 86400
        invalid_properties.push('invalid value for "time_window_start", must be smaller than or equal to 86400.')
      end

      if !@time_window_start.nil? && @time_window_start < 0
        invalid_properties.push('invalid value for "time_window_start", must be greater than or equal to 0.')
      end

      if !@time_window_stop.nil? && @time_window_stop > 86400
        invalid_properties.push('invalid value for "time_window_stop", must be smaller than or equal to 86400.')
      end

      if !@time_window_stop.nil? && @time_window_stop < 0
        invalid_properties.push('invalid value for "time_window_stop", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @cycle.nil?
      cycle_validator = EnumAttributeValidator.new('String', ["date", "daily", "weekly", "monthly", "yearly"])
      return false unless cycle_validator.valid?(@cycle)
      return false if !@interval.nil? && @interval < 1
      return false if !@month.nil? && @month > 12
      return false if !@month.nil? && @month < 1
      return false if @name.nil?
      return false if @name.to_s.length > 128
      ordinal_validator = EnumAttributeValidator.new('String', ["every", "first", "second", "third", "fourth", "fifth", "last"])
      return false unless ordinal_validator.valid?(@ordinal)
      return false if !@time_window_start.nil? && @time_window_start > 86400
      return false if !@time_window_start.nil? && @time_window_start < 0
      return false if !@time_window_stop.nil? && @time_window_stop > 86400
      return false if !@time_window_stop.nil? && @time_window_stop < 0
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cycle Object to be assigned
    def cycle=(cycle)
      validator = EnumAttributeValidator.new('String', ["date", "daily", "weekly", "monthly", "yearly"])
      unless validator.valid?(cycle)
        fail ArgumentError, "invalid value for \"cycle\", must be one of #{validator.allowable_values}."
      end
      @cycle = cycle
    end

    # Custom attribute writer method with validation
    # @param [Object] interval Value to be assigned
    def interval=(interval)
      if interval.nil?
        fail ArgumentError, 'interval cannot be nil'
      end

      if interval < 1
        fail ArgumentError, 'invalid value for "interval", must be greater than or equal to 1.'
      end

      @interval = interval
    end

    # Custom attribute writer method with validation
    # @param [Object] month Value to be assigned
    def month=(month)
      if month.nil?
        fail ArgumentError, 'month cannot be nil'
      end

      if month > 12
        fail ArgumentError, 'invalid value for "month", must be smaller than or equal to 12.'
      end

      if month < 1
        fail ArgumentError, 'invalid value for "month", must be greater than or equal to 1.'
      end

      @month = month
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length > 128
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 128.'
      end

      @name = name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ordinal Object to be assigned
    def ordinal=(ordinal)
      validator = EnumAttributeValidator.new('String', ["every", "first", "second", "third", "fourth", "fifth", "last"])
      unless validator.valid?(ordinal)
        fail ArgumentError, "invalid value for \"ordinal\", must be one of #{validator.allowable_values}."
      end
      @ordinal = ordinal
    end

    # Custom attribute writer method with validation
    # @param [Object] time_window_start Value to be assigned
    def time_window_start=(time_window_start)
      if time_window_start.nil?
        fail ArgumentError, 'time_window_start cannot be nil'
      end

      if time_window_start > 86400
        fail ArgumentError, 'invalid value for "time_window_start", must be smaller than or equal to 86400.'
      end

      if time_window_start < 0
        fail ArgumentError, 'invalid value for "time_window_start", must be greater than or equal to 0.'
      end

      @time_window_start = time_window_start
    end

    # Custom attribute writer method with validation
    # @param [Object] time_window_stop Value to be assigned
    def time_window_stop=(time_window_stop)
      if time_window_stop.nil?
        fail ArgumentError, 'time_window_stop cannot be nil'
      end

      if time_window_stop > 86400
        fail ArgumentError, 'invalid value for "time_window_stop", must be smaller than or equal to 86400.'
      end

      if time_window_stop < 0
        fail ArgumentError, 'invalid value for "time_window_stop", must be greater than or equal to 0.'
      end

      @time_window_stop = time_window_stop
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cycle == o.cycle &&
          days == o.days &&
          enabled == o.enabled &&
          interval == o.interval &&
          month == o.month &&
          name == o.name &&
          ordinal == o.ordinal &&
          start_date == o.start_date &&
          start_date_req == o.start_date_req &&
          time_window_start == o.time_window_start &&
          time_window_start_req == o.time_window_start_req &&
          time_window_stop == o.time_window_stop &&
          time_window_stop_req == o.time_window_stop_req &&
          wdays == o.wdays
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [cycle, days, enabled, interval, month, name, ordinal, start_date, start_date_req, time_window_start, time_window_start_req, time_window_stop, time_window_stop_req, wdays].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
