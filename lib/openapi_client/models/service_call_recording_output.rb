=begin
#White Label Communications CPaas API Documentation

#A CPaaS platform API

The version of the OpenAPI document: 1.1
Contact: support@whitelabelcomm.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0-SNAPSHOT

=end

require 'date'
require 'time'

module OpenapiClient
  class ServiceCallRecordingOutput
    attr_accessor :call_id

    attr_accessor :callee_id_name

    attr_accessor :callee_id_number

    attr_accessor :caller_id_name

    attr_accessor :caller_id_number

    attr_accessor :cdr_id

    attr_accessor :content_type

    attr_accessor :custom_channel_vars

    attr_accessor :description

    attr_accessor :direction

    attr_accessor :duration

    attr_accessor :duration_ms

    attr_accessor :endpoint_id

    attr_accessor :from

    attr_accessor :id

    attr_accessor :interaction_id

    attr_accessor :media_source

    attr_accessor :media_type

    attr_accessor :name

    attr_accessor :origin

    attr_accessor :owner_id

    attr_accessor :request

    attr_accessor :source_type

    attr_accessor :start

    attr_accessor :to

    attr_accessor :url

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'call_id' => :'call_id',
        :'callee_id_name' => :'callee_id_name',
        :'callee_id_number' => :'callee_id_number',
        :'caller_id_name' => :'caller_id_name',
        :'caller_id_number' => :'caller_id_number',
        :'cdr_id' => :'cdr_id',
        :'content_type' => :'content_type',
        :'custom_channel_vars' => :'custom_channel_vars',
        :'description' => :'description',
        :'direction' => :'direction',
        :'duration' => :'duration',
        :'duration_ms' => :'duration_ms',
        :'endpoint_id' => :'endpoint_id',
        :'from' => :'from',
        :'id' => :'id',
        :'interaction_id' => :'interaction_id',
        :'media_source' => :'media_source',
        :'media_type' => :'media_type',
        :'name' => :'name',
        :'origin' => :'origin',
        :'owner_id' => :'owner_id',
        :'request' => :'request',
        :'source_type' => :'source_type',
        :'start' => :'start',
        :'to' => :'to',
        :'url' => :'url'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'call_id' => :'String',
        :'callee_id_name' => :'String',
        :'callee_id_number' => :'String',
        :'caller_id_name' => :'String',
        :'caller_id_number' => :'String',
        :'cdr_id' => :'String',
        :'content_type' => :'String',
        :'custom_channel_vars' => :'Hash<String, Object>',
        :'description' => :'String',
        :'direction' => :'String',
        :'duration' => :'Integer',
        :'duration_ms' => :'Integer',
        :'endpoint_id' => :'String',
        :'from' => :'String',
        :'id' => :'String',
        :'interaction_id' => :'String',
        :'media_source' => :'String',
        :'media_type' => :'String',
        :'name' => :'String',
        :'origin' => :'String',
        :'owner_id' => :'String',
        :'request' => :'String',
        :'source_type' => :'String',
        :'start' => :'Integer',
        :'to' => :'String',
        :'url' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ServiceCallRecordingOutput` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ServiceCallRecordingOutput`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'call_id')
        self.call_id = attributes[:'call_id']
      end

      if attributes.key?(:'callee_id_name')
        self.callee_id_name = attributes[:'callee_id_name']
      end

      if attributes.key?(:'callee_id_number')
        self.callee_id_number = attributes[:'callee_id_number']
      end

      if attributes.key?(:'caller_id_name')
        self.caller_id_name = attributes[:'caller_id_name']
      end

      if attributes.key?(:'caller_id_number')
        self.caller_id_number = attributes[:'caller_id_number']
      end

      if attributes.key?(:'cdr_id')
        self.cdr_id = attributes[:'cdr_id']
      end

      if attributes.key?(:'content_type')
        self.content_type = attributes[:'content_type']
      end

      if attributes.key?(:'custom_channel_vars')
        if (value = attributes[:'custom_channel_vars']).is_a?(Hash)
          self.custom_channel_vars = value
        end
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'direction')
        self.direction = attributes[:'direction']
      end

      if attributes.key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.key?(:'duration_ms')
        self.duration_ms = attributes[:'duration_ms']
      end

      if attributes.key?(:'endpoint_id')
        self.endpoint_id = attributes[:'endpoint_id']
      end

      if attributes.key?(:'from')
        self.from = attributes[:'from']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'interaction_id')
        self.interaction_id = attributes[:'interaction_id']
      end

      if attributes.key?(:'media_source')
        self.media_source = attributes[:'media_source']
      end

      if attributes.key?(:'media_type')
        self.media_type = attributes[:'media_type']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'origin')
        self.origin = attributes[:'origin']
      end

      if attributes.key?(:'owner_id')
        self.owner_id = attributes[:'owner_id']
      end

      if attributes.key?(:'request')
        self.request = attributes[:'request']
      end

      if attributes.key?(:'source_type')
        self.source_type = attributes[:'source_type']
      end

      if attributes.key?(:'start')
        self.start = attributes[:'start']
      end

      if attributes.key?(:'to')
        self.to = attributes[:'to']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          call_id == o.call_id &&
          callee_id_name == o.callee_id_name &&
          callee_id_number == o.callee_id_number &&
          caller_id_name == o.caller_id_name &&
          caller_id_number == o.caller_id_number &&
          cdr_id == o.cdr_id &&
          content_type == o.content_type &&
          custom_channel_vars == o.custom_channel_vars &&
          description == o.description &&
          direction == o.direction &&
          duration == o.duration &&
          duration_ms == o.duration_ms &&
          endpoint_id == o.endpoint_id &&
          from == o.from &&
          id == o.id &&
          interaction_id == o.interaction_id &&
          media_source == o.media_source &&
          media_type == o.media_type &&
          name == o.name &&
          origin == o.origin &&
          owner_id == o.owner_id &&
          request == o.request &&
          source_type == o.source_type &&
          start == o.start &&
          to == o.to &&
          url == o.url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [call_id, callee_id_name, callee_id_number, caller_id_name, caller_id_number, cdr_id, content_type, custom_channel_vars, description, direction, duration, duration_ms, endpoint_id, from, id, interaction_id, media_source, media_type, name, origin, owner_id, request, source_type, start, to, url].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
