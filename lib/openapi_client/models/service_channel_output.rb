=begin
#White Label Communications CPaas API Documentation

#A CPaaS platform API

The version of the OpenAPI document: 1.1
Contact: support@whitelabelcomm.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0-SNAPSHOT

=end

require 'date'
require 'time'

module OpenapiClient
  class ServiceChannelOutput
    attr_accessor :answered

    attr_accessor :authorizing_id

    attr_accessor :authorizing_type

    attr_accessor :callflow_id

    attr_accessor :channel_authorized

    attr_accessor :custom_application_vars

    attr_accessor :custom_auth_headers

    attr_accessor :custom_channel_vars

    attr_accessor :custom_sip_headers

    attr_accessor :destination

    attr_accessor :direction

    attr_accessor :elapsed_s

    attr_accessor :from_tag

    attr_accessor :interaction_id

    attr_accessor :is_loopback

    attr_accessor :is_onhold

    attr_accessor :other_leg

    attr_accessor :owner_id

    attr_accessor :presence_id

    attr_accessor :request

    attr_accessor :reseller_id

    attr_accessor :timestamp

    attr_accessor :to_tag

    attr_accessor :username

    attr_accessor :uuid

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'answered' => :'answered',
        :'authorizing_id' => :'authorizing_id',
        :'authorizing_type' => :'authorizing_type',
        :'callflow_id' => :'callflow_id',
        :'channel_authorized' => :'channel_authorized',
        :'custom_application_vars' => :'custom_application_vars',
        :'custom_auth_headers' => :'custom_auth_headers',
        :'custom_channel_vars' => :'custom_channel_vars',
        :'custom_sip_headers' => :'custom_sip_headers',
        :'destination' => :'destination',
        :'direction' => :'direction',
        :'elapsed_s' => :'elapsed_s',
        :'from_tag' => :'from_tag',
        :'interaction_id' => :'interaction_id',
        :'is_loopback' => :'is_loopback',
        :'is_onhold' => :'is_onhold',
        :'other_leg' => :'other_leg',
        :'owner_id' => :'owner_id',
        :'presence_id' => :'presence_id',
        :'request' => :'request',
        :'reseller_id' => :'reseller_id',
        :'timestamp' => :'timestamp',
        :'to_tag' => :'to_tag',
        :'username' => :'username',
        :'uuid' => :'uuid'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'answered' => :'Boolean',
        :'authorizing_id' => :'String',
        :'authorizing_type' => :'String',
        :'callflow_id' => :'String',
        :'channel_authorized' => :'Boolean',
        :'custom_application_vars' => :'Hash<String, Object>',
        :'custom_auth_headers' => :'Hash<String, Object>',
        :'custom_channel_vars' => :'Hash<String, Object>',
        :'custom_sip_headers' => :'Hash<String, Object>',
        :'destination' => :'String',
        :'direction' => :'String',
        :'elapsed_s' => :'Integer',
        :'from_tag' => :'String',
        :'interaction_id' => :'String',
        :'is_loopback' => :'Boolean',
        :'is_onhold' => :'Boolean',
        :'other_leg' => :'String',
        :'owner_id' => :'String',
        :'presence_id' => :'String',
        :'request' => :'String',
        :'reseller_id' => :'String',
        :'timestamp' => :'Integer',
        :'to_tag' => :'String',
        :'username' => :'String',
        :'uuid' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ServiceChannelOutput` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ServiceChannelOutput`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'answered')
        self.answered = attributes[:'answered']
      end

      if attributes.key?(:'authorizing_id')
        self.authorizing_id = attributes[:'authorizing_id']
      end

      if attributes.key?(:'authorizing_type')
        self.authorizing_type = attributes[:'authorizing_type']
      end

      if attributes.key?(:'callflow_id')
        self.callflow_id = attributes[:'callflow_id']
      end

      if attributes.key?(:'channel_authorized')
        self.channel_authorized = attributes[:'channel_authorized']
      end

      if attributes.key?(:'custom_application_vars')
        if (value = attributes[:'custom_application_vars']).is_a?(Hash)
          self.custom_application_vars = value
        end
      end

      if attributes.key?(:'custom_auth_headers')
        if (value = attributes[:'custom_auth_headers']).is_a?(Hash)
          self.custom_auth_headers = value
        end
      end

      if attributes.key?(:'custom_channel_vars')
        if (value = attributes[:'custom_channel_vars']).is_a?(Hash)
          self.custom_channel_vars = value
        end
      end

      if attributes.key?(:'custom_sip_headers')
        if (value = attributes[:'custom_sip_headers']).is_a?(Hash)
          self.custom_sip_headers = value
        end
      end

      if attributes.key?(:'destination')
        self.destination = attributes[:'destination']
      end

      if attributes.key?(:'direction')
        self.direction = attributes[:'direction']
      end

      if attributes.key?(:'elapsed_s')
        self.elapsed_s = attributes[:'elapsed_s']
      end

      if attributes.key?(:'from_tag')
        self.from_tag = attributes[:'from_tag']
      end

      if attributes.key?(:'interaction_id')
        self.interaction_id = attributes[:'interaction_id']
      end

      if attributes.key?(:'is_loopback')
        self.is_loopback = attributes[:'is_loopback']
      end

      if attributes.key?(:'is_onhold')
        self.is_onhold = attributes[:'is_onhold']
      end

      if attributes.key?(:'other_leg')
        self.other_leg = attributes[:'other_leg']
      end

      if attributes.key?(:'owner_id')
        self.owner_id = attributes[:'owner_id']
      end

      if attributes.key?(:'presence_id')
        self.presence_id = attributes[:'presence_id']
      end

      if attributes.key?(:'request')
        self.request = attributes[:'request']
      end

      if attributes.key?(:'reseller_id')
        self.reseller_id = attributes[:'reseller_id']
      end

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.key?(:'to_tag')
        self.to_tag = attributes[:'to_tag']
      end

      if attributes.key?(:'username')
        self.username = attributes[:'username']
      end

      if attributes.key?(:'uuid')
        self.uuid = attributes[:'uuid']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          answered == o.answered &&
          authorizing_id == o.authorizing_id &&
          authorizing_type == o.authorizing_type &&
          callflow_id == o.callflow_id &&
          channel_authorized == o.channel_authorized &&
          custom_application_vars == o.custom_application_vars &&
          custom_auth_headers == o.custom_auth_headers &&
          custom_channel_vars == o.custom_channel_vars &&
          custom_sip_headers == o.custom_sip_headers &&
          destination == o.destination &&
          direction == o.direction &&
          elapsed_s == o.elapsed_s &&
          from_tag == o.from_tag &&
          interaction_id == o.interaction_id &&
          is_loopback == o.is_loopback &&
          is_onhold == o.is_onhold &&
          other_leg == o.other_leg &&
          owner_id == o.owner_id &&
          presence_id == o.presence_id &&
          request == o.request &&
          reseller_id == o.reseller_id &&
          timestamp == o.timestamp &&
          to_tag == o.to_tag &&
          username == o.username &&
          uuid == o.uuid
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [answered, authorizing_id, authorizing_type, callflow_id, channel_authorized, custom_application_vars, custom_auth_headers, custom_channel_vars, custom_sip_headers, destination, direction, elapsed_s, from_tag, interaction_id, is_loopback, is_onhold, other_leg, owner_id, presence_id, request, reseller_id, timestamp, to_tag, username, uuid].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
