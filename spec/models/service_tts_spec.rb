=begin
#White Label Communications CPaas API Documentation

#A CPaaS platform API

The version of the OpenAPI document: 1.1
Contact: support@whitelabelcomm.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for OpenapiClient::ServiceTTS
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe OpenapiClient::ServiceTTS do
  let(:instance) { OpenapiClient::ServiceTTS.new }

  describe 'test an instance of ServiceTTS' do
    it 'should create an instance of ServiceTTS' do
      # uncomment below to test the instance creation
      #expect(instance).to be_instance_of(OpenapiClient::ServiceTTS)
    end
  end

  describe 'test attribute "text"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  describe 'test attribute "voice"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["female/en-US", "male/en-US", "female/en-CA", "female/en-AU", "female/en-GB", "male/en-GB", "female/es-US", "male/es-US", "female/us-US", "female/zh-CN", "male/zh-CN", "female/zh-HK", "female/zh-TW", "female/ja-JP", "male/ja-JP", "female/ko-KR", "male/ko-KR", "female/da-DK", "female/de-DE", "male/de-DE", "female/ca-ES", "female/es-ES", "male/es-ES", "female/fi-FI", "female/fr-CA", "male/fr-CA", "female/fr-FR", "male/fr-FR", "female/it-IT", "male/it-IT", "female/nb-NO", "female/nl-NL", "female/pl-PL", "female/pt-BR", "female/pt-PT", "male/pt-PT", "female/ru-RU", "male/ru-RU", "female/sv-SE", "female/hu-HU", "female/cs-CZ", "female/tr-TR", "male/tr-TR", "male/ru-RU/Vladimir", "female/ru-RU/Julia", "female/ru-RU/Anna", "female/ru-RU/Viktoria", "male/ru-RU/Alexander", "female/ru-RU/Maria", "female/ru-RU/Lidia", "es-ES-Standard-A", "it-IT-Standard-A", "ja-JP-Standard-A", "ko-KR-Standard-A", "pt-BR-Standard-A", "tr-TR-Standard-A", "sv-SE-Standard-A", "nl-NL-Standard-A", "en-US-Wavenet-D", "de-DE-Wavenet-A", "de-DE-Wavenet-B", "de-DE-Wavenet-C", "de-DE-Wavenet-D", "en-AU-Wavenet-A", "en-AU-Wavenet-B", "en-AU-Wavenet-C", "en-AU-Wavenet-D", "en-GB-Wavenet-A", "en-GB-Wavenet-B", "en-GB-Wavenet-C", "en-GB-Wavenet-D", "en-US-Wavenet-A", "en-US-Wavenet-B", "en-US-Wavenet-C", "en-US-Wavenet-E", "en-US-Wavenet-F", "fr-FR-Wavenet-A", "fr-FR-Wavenet-B", "fr-FR-Wavenet-C", "fr-FR-Wavenet-D", "it-IT-Wavenet-A", "ja-JP-Wavenet-A", "nl-NL-Wavenet-A", "en-GB-Standard-A", "en-GB-Standard-B", "en-GB-Standard-C", "en-GB-Standard-D", "en-US-Standard-B", "en-US-Standard-C", "en-US-Standard-D", "en-US-Standard-E", "de-DE-Standard-A", "de-DE-Standard-B", "en-AU-Standard-A", "en-AU-Standard-B", "en-AU-Standard-C", "en-AU-Standard-D", "fr-CA-Standard-A", "fr-CA-Standard-B", "fr-CA-Standard-C", "fr-CA-Standard-D", "fr-FR-Standard-A", "fr-FR-Standard-B", "fr-FR-Standard-C", "fr-FR-Standard-D"])
      # validator.allowable_values.each do |value|
      #   expect { instance.voice = value }.not_to raise_error
      # end
    end
  end

end
